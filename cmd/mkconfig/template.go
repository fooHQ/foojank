package main

import (
	"bytes"
	"text/template"
)

type Template struct{}

func NewTemplate() *Template {
	return &Template{}
}

func (t *Template) Render(data any) (string, error) {
	tpl, err := template.New("template").Parse(input)
	if err != nil {
		return "", err
	}

	buf := bytes.NewBuffer(nil)
	err = tpl.Execute(buf, data)
	if err != nil {
		return "", err
	}

	return buf.String(), nil
}

var input = `// Code generated by go generate; DO NOT EDIT.
package config

const (
	ServerURL = "{{ .Server.URL }}"
	ServerUsername = "{{ .Server.Username }}"
	ServerPassword = "{{ .Server.Password }}"
)

const (
	ServiceName = "{{ .Service.Name }}"
	ServiceWorkerName = "{{ .Service.Name }}"
	ServiceVersion = "{{ .Service.Version }}"
	ServiceSubjectsRpc = "{{ .Service.Subjects.Rpc }}"
	ServiceSubjectsData = "{{ .Service.Subjects.Data }}"
	ServiceSubjectsStdin = "{{ .Service.Subjects.Stdin }}"
	ServiceSubjectsStdout = "{{ .Service.Subjects.Stdout }}"
)
`

type Data struct {
	Server struct {
		URL      string `yaml:"url"`
		Username string `yaml:"username"`
		Password string `yaml:"password"`
	} `yaml:"server"`
	Service struct {
		Name     string `yaml:"name"`
		Version  string `yaml:"version"`
		Subjects struct {
			Rpc    string `yaml:"rpc"`
			Data   string `yaml:"data"`
			Stdin  string `yaml:"stdin"`
			Stdout string `yaml:"stdout"`
		} `yaml:"subjects"`
	} `yaml:"service"`
}
