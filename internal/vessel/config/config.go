// Code generated by go generate; DO NOT EDIT.
package config

import (
	"github.com/risor-io/risor/object"
	modbase64 "github.com/foohq/foojank/internal/engine/modules/base64"
	modbuiltins "github.com/foohq/foojank/internal/engine/modules/builtins"
	modbytes "github.com/foohq/foojank/internal/engine/modules/bytes"
	modcli "github.com/foohq/foojank/internal/engine/modules/cli"
	moderrors "github.com/foohq/foojank/internal/engine/modules/errors"
	modexec "github.com/foohq/foojank/internal/engine/modules/exec"
	modfilepath "github.com/foohq/foojank/internal/engine/modules/filepath"
	modfmt "github.com/foohq/foojank/internal/engine/modules/fmt"
	modhttp "github.com/foohq/foojank/internal/engine/modules/http"
	modjson "github.com/foohq/foojank/internal/engine/modules/json"
	modmath "github.com/foohq/foojank/internal/engine/modules/math"
	modnet "github.com/foohq/foojank/internal/engine/modules/net"
	modos "github.com/foohq/foojank/internal/engine/modules/os"
	modrand "github.com/foohq/foojank/internal/engine/modules/rand"
	modregexp "github.com/foohq/foojank/internal/engine/modules/regexp"
	modshlex "github.com/foohq/foojank/internal/engine/modules/shlex"
	modstrconv "github.com/foohq/foojank/internal/engine/modules/strconv"
	modstrings "github.com/foohq/foojank/internal/engine/modules/strings"
	modtime "github.com/foohq/foojank/internal/engine/modules/time"
	modurlpath "github.com/foohq/foojank/internal/engine/modules/urlpath"
)

var (
	Servers = []string{
		"wss://localhost",
	}
	TLSCACertificate = "MIIBeTCCASCgAwIBAgIQVPQXJpQBcuqC3i3L+r19oDAKBggqhkjOPQQDAjASMRAwDgYDVQQLEwdBQ01FIENvMB4XDTI1MDYxMzIwMTUzMVoXDTI2MDYxMzIwMTUzMVowEjEQMA4GA1UECxMHQUNNRSBDbzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABEDQPaqsr4LKbrWZ8phK02THqFWCkvFD+rVqxw/8URwS7ylf/JCJg8T61HfRT4LGN7+2rjlpsaY7Tuo4iLZontmjWDBWMA4GA1UdDwEB/wQEAwIChDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR+/RGDc51f8EF6W6Y8810ItQY7pjAUBgNVHREEDTALgglsb2NhbGhvc3QwCgYIKoZIzj0EAwIDRwAwRAIgE6MI4HfhSsIA/pifeje/2NfAQTTyehnSG3CoIe5tH2ICIFhCeHNMkygbzR7CqEmm3Ug4ChTKRsEOjsaNQusSGCtX"
	UserJWT = "eyJ0eXAiOiJKV1QiLCJhbGciOiJlZDI1NTE5LW5rZXkifQ.eyJqdGkiOiJQQ05WN09BUlFXTk9ZUUNGUkdGSkU2UFJJUEJDVkc3VFVaN1dMM1FES0VOSU9CMkE1MklRIiwiaWF0IjoxNzQ5ODQ3Mzc4LCJpc3MiOiJBQU9aTUs3SUhUTzNNM0U1QTJQTUJEVjZPQTRDQ0hOV1hGVzNLNk81V1NDMzVIVENVNlNRNFAyRCIsIm5hbWUiOiJmUWc0NHV2M1pnZGJtVU5rM3I5bFI5Iiwic3ViIjoiVUNCWjc0SkpQN0hUQ0NINEEyVzZBTzJXRDZITTQyQVdZTDJCU1ZJSFJGN1hXNVVTWTRFTUlTUzMiLCJuYXRzIjp7InB1YiI6eyJhbGxvdyI6WyIkSlMuQVBJLlNUUkVBTS5JTkZPLk9CSl9mUWc0NHV2M1pnZGJtVU5rM3I5bFI5IiwiJEpTLkFQSS5ESVJFQ1QuR0VULk9CSl9mUWc0NHV2M1pnZGJtVU5rM3I5bFI5LiRPLmZRZzQ0dXYzWmdkYm1VTmszcjlsUjkuTS4qIiwiJEpTLkFQSS5DT05TVU1FUi5DUkVBVEUuT0JKX2ZRZzQ0dXYzWmdkYm1VTmszcjlsUjkuKi4kTy5mUWc0NHV2M1pnZGJtVU5rM3I5bFI5LkMuKiIsIiRKUy5BUEkuQ09OU1VNRVIuREVMRVRFLk9CSl9mUWc0NHV2M1pnZGJtVU5rM3I5bFI5LioiLCJmUWc0NHV2M1pnZGJtVU5rM3I5bFI5LiouU1RET1VUIiwiX0lOQk9YLlx1MDAzZSIsIiRPLmZRZzQ0dXYzWmdkYm1VTmszcjlsUjkuTS4qIiwiJE8uZlFnNDR1djNaZ2RibVVOazNyOWxSOS5DLioiLCIkSlMuQVBJLlNUUkVBTS5QVVJHRS5PQkpfZlFnNDR1djNaZ2RibVVOazNyOWxSOSIsIiRKUy5BUEkuQ09OU1VNRVIuQ1JFQVRFLk9CSl9mUWc0NHV2M1pnZGJtVU5rM3I5bFI5LiouJE8uZlFnNDR1djNaZ2RibVVOazNyOWxSOS5NLioiXX0sInN1YiI6eyJhbGxvdyI6WyJfSU5CT1hfZlFnNDR1djNaZ2RibVVOazNyOWxSOS5cdTAwM2UiLCIkU1JWLlBJTkciLCIkU1JWLlBJTkcuZlFnNDR1djNaZ2RibVVOazNyOWxSOSIsIiRTUlYuUElORy5mUWc0NHV2M1pnZGJtVU5rM3I5bFI5LioiLCIkU1JWLklORk8iLCIkU1JWLklORk8uZlFnNDR1djNaZ2RibVVOazNyOWxSOSIsIiRTUlYuSU5GTy5mUWc0NHV2M1pnZGJtVU5rM3I5bFI5LioiLCIkU1JWLlNUQVRTIiwiJFNSVi5TVEFUUy5mUWc0NHV2M1pnZGJtVU5rM3I5bFI5IiwiJFNSVi5TVEFUUy5mUWc0NHV2M1pnZGJtVU5rM3I5bFI5LioiLCJmUWc0NHV2M1pnZGJtVU5rM3I5bFI5LlJQQyIsImZRZzQ0dXYzWmdkYm1VTmszcjlsUjkuKi5EQVRBIiwiZlFnNDR1djNaZ2RibVVOazNyOWxSOS4qLlNURElOIl19LCJzdWJzIjotMSwiZGF0YSI6LTEsInBheWxvYWQiOi0xLCJpc3N1ZXJfYWNjb3VudCI6IkFER0xFRUYzWktPNzZPWE9VVEk0RDNYQjJJM1Y1REtGUllYUFNFTVZHM1RSWVZCNVhEQVZXUEtHIiwidHlwZSI6InVzZXIiLCJ2ZXJzaW9uIjoyfX0.5OHGrifL7uqvWrMhiAM4fTICdWQaniHG36pqVFcHflImiRAQcQkcEGgHNBDfsH-dIC2w9i-gfE8_Z9Pk-8V1CQ"
	UserKeySeed = "SUAEM23XD4E3QGITUX7CUD7VB5GY24ZRAIL3BGMBJO4HOXNZYCZIJZIOK4"
	ServiceName = "fQg44uv3ZgdbmUNk3r9lR9"
	ServiceVersion = "0.3.0"
	Modules = func() map[string]any {
		modules := []*object.Module{
			modbase64.Module(),
			modbuiltins.Module(),
			modbytes.Module(),
			modcli.Module(),
			moderrors.Module(),
			modexec.Module(),
			modfilepath.Module(),
			modfmt.Module(),
			modhttp.Module(),
			modjson.Module(),
			modmath.Module(),
			modnet.Module(),
			modos.Module(),
			modrand.Module(),
			modregexp.Module(),
			modshlex.Module(),
			modstrconv.Module(),
			modstrings.Module(),
			modtime.Module(),
			modurlpath.Module(),
		}
		result := make(map[string]any)
		for _, module := range modules {
			if module == nil {
				continue
			}
			name := module.Name().String()
			result[name] = module
		}
		return result
	}
	Builtins = func() map[string]any {
		builtins := []map[string]object.Object{
			modbase64.Builtins(),
			modbuiltins.Builtins(),
			modbytes.Builtins(),
			modcli.Builtins(),
			moderrors.Builtins(),
			modexec.Builtins(),
			modfilepath.Builtins(),
			modfmt.Builtins(),
			modhttp.Builtins(),
			modjson.Builtins(),
			modmath.Builtins(),
			modnet.Builtins(),
			modos.Builtins(),
			modrand.Builtins(),
			modregexp.Builtins(),
			modshlex.Builtins(),
			modstrconv.Builtins(),
			modstrings.Builtins(),
			modtime.Builtins(),
			modurlpath.Builtins(),
		}
		result := make(map[string]any)
		for _, builtin := range builtins {
			if builtin == nil {
				continue
			}
			for name, fn := range builtin {
				result[name] = fn
			}
		}
		return result
	}
)
