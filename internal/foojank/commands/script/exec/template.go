package exec

import (
	"bytes"
	"text/template"
)

type templateData struct {
	Modules []string
}

const templateString = `// Code generated by go generate; DO NOT EDIT.
package config

import (
	"github.com/risor-io/risor/object"
{{- range .Modules }}
	mod{{ . }} "github.com/foohq/foojank/modules/{{ . }}"
{{- end }}
)

var (
	Modules = func() map[string]any {
		modules := []*object.Module{
		{{- range .Modules }}
			mod{{ . }}.Module(),
		{{- end }}
		}
		result := make(map[string]any)
		for _, module := range modules {
			if module == nil {
				continue
			}
			name := module.Name().String()
			result[name] = module
		}
		return result
	}
	Builtins = func() map[string]any {
		builtins := []map[string]object.Object{
		{{- range .Modules }}
			mod{{ . }}.Builtins(),
		{{- end }}
		}
		result := make(map[string]any)
		for _, builtin := range builtins {
			if builtin == nil {
				continue
			}
			for name, fn := range builtin {
				result[name] = fn
			}
		}
		return result
	}
)
`

func RenderTemplate(tstr string, data any) ([]byte, error) {
	tpl, err := template.New("template").Parse(tstr)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(nil)
	err = tpl.Execute(buf, data)
	if err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}
