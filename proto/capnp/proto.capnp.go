// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type StartWorkerRequest capnp.Struct

// StartWorkerRequest_TypeID is the unique identifier for the type StartWorkerRequest.
const StartWorkerRequest_TypeID = 0x9892032ea4e69c6b

func NewStartWorkerRequest(s *capnp.Segment) (StartWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return StartWorkerRequest(st), err
}

func NewRootStartWorkerRequest(s *capnp.Segment) (StartWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return StartWorkerRequest(st), err
}

func ReadRootStartWorkerRequest(msg *capnp.Message) (StartWorkerRequest, error) {
	root, err := msg.Root()
	return StartWorkerRequest(root.Struct()), err
}

func (s StartWorkerRequest) String() string {
	str, _ := text.Marshal(0x9892032ea4e69c6b, capnp.Struct(s))
	return str
}

func (s StartWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StartWorkerRequest) DecodeFromPtr(p capnp.Ptr) StartWorkerRequest {
	return StartWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StartWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StartWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StartWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StartWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StartWorkerRequest) File() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StartWorkerRequest) HasFile() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StartWorkerRequest) FileBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StartWorkerRequest) SetFile(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s StartWorkerRequest) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s StartWorkerRequest) HasArgs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s StartWorkerRequest) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s StartWorkerRequest) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s StartWorkerRequest) Env() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s StartWorkerRequest) HasEnv() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s StartWorkerRequest) SetEnv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s StartWorkerRequest) NewEnv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// StartWorkerRequest_List is a list of StartWorkerRequest.
type StartWorkerRequest_List = capnp.StructList[StartWorkerRequest]

// NewStartWorkerRequest creates a new list of StartWorkerRequest.
func NewStartWorkerRequest_List(s *capnp.Segment, sz int32) (StartWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[StartWorkerRequest](l), err
}

// StartWorkerRequest_Future is a wrapper for a StartWorkerRequest promised by a client call.
type StartWorkerRequest_Future struct{ *capnp.Future }

func (f StartWorkerRequest_Future) Struct() (StartWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return StartWorkerRequest(p.Struct()), err
}

type StartWorkerResponse capnp.Struct

// StartWorkerResponse_TypeID is the unique identifier for the type StartWorkerResponse.
const StartWorkerResponse_TypeID = 0xc5f4047bf39fa88d

func NewStartWorkerResponse(s *capnp.Segment) (StartWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StartWorkerResponse(st), err
}

func NewRootStartWorkerResponse(s *capnp.Segment) (StartWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StartWorkerResponse(st), err
}

func ReadRootStartWorkerResponse(msg *capnp.Message) (StartWorkerResponse, error) {
	root, err := msg.Root()
	return StartWorkerResponse(root.Struct()), err
}

func (s StartWorkerResponse) String() string {
	str, _ := text.Marshal(0xc5f4047bf39fa88d, capnp.Struct(s))
	return str
}

func (s StartWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StartWorkerResponse) DecodeFromPtr(p capnp.Ptr) StartWorkerResponse {
	return StartWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StartWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StartWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StartWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StartWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StartWorkerResponse) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StartWorkerResponse) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StartWorkerResponse) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StartWorkerResponse) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StartWorkerResponse_List is a list of StartWorkerResponse.
type StartWorkerResponse_List = capnp.StructList[StartWorkerResponse]

// NewStartWorkerResponse creates a new list of StartWorkerResponse.
func NewStartWorkerResponse_List(s *capnp.Segment, sz int32) (StartWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StartWorkerResponse](l), err
}

// StartWorkerResponse_Future is a wrapper for a StartWorkerResponse promised by a client call.
type StartWorkerResponse_Future struct{ *capnp.Future }

func (f StartWorkerResponse_Future) Struct() (StartWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return StartWorkerResponse(p.Struct()), err
}

type StopWorkerRequest capnp.Struct

// StopWorkerRequest_TypeID is the unique identifier for the type StopWorkerRequest.
const StopWorkerRequest_TypeID = 0xb15c44a86e45d3b0

func NewStopWorkerRequest(s *capnp.Segment) (StopWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StopWorkerRequest(st), err
}

func NewRootStopWorkerRequest(s *capnp.Segment) (StopWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StopWorkerRequest(st), err
}

func ReadRootStopWorkerRequest(msg *capnp.Message) (StopWorkerRequest, error) {
	root, err := msg.Root()
	return StopWorkerRequest(root.Struct()), err
}

func (s StopWorkerRequest) String() string {
	str, _ := text.Marshal(0xb15c44a86e45d3b0, capnp.Struct(s))
	return str
}

func (s StopWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StopWorkerRequest) DecodeFromPtr(p capnp.Ptr) StopWorkerRequest {
	return StopWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StopWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StopWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StopWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StopWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StopWorkerRequest_List is a list of StopWorkerRequest.
type StopWorkerRequest_List = capnp.StructList[StopWorkerRequest]

// NewStopWorkerRequest creates a new list of StopWorkerRequest.
func NewStopWorkerRequest_List(s *capnp.Segment, sz int32) (StopWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StopWorkerRequest](l), err
}

// StopWorkerRequest_Future is a wrapper for a StopWorkerRequest promised by a client call.
type StopWorkerRequest_Future struct{ *capnp.Future }

func (f StopWorkerRequest_Future) Struct() (StopWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return StopWorkerRequest(p.Struct()), err
}

type StopWorkerResponse capnp.Struct

// StopWorkerResponse_TypeID is the unique identifier for the type StopWorkerResponse.
const StopWorkerResponse_TypeID = 0xdea9ade321ec73b3

func NewStopWorkerResponse(s *capnp.Segment) (StopWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StopWorkerResponse(st), err
}

func NewRootStopWorkerResponse(s *capnp.Segment) (StopWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StopWorkerResponse(st), err
}

func ReadRootStopWorkerResponse(msg *capnp.Message) (StopWorkerResponse, error) {
	root, err := msg.Root()
	return StopWorkerResponse(root.Struct()), err
}

func (s StopWorkerResponse) String() string {
	str, _ := text.Marshal(0xdea9ade321ec73b3, capnp.Struct(s))
	return str
}

func (s StopWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StopWorkerResponse) DecodeFromPtr(p capnp.Ptr) StopWorkerResponse {
	return StopWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StopWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StopWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StopWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StopWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StopWorkerResponse) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StopWorkerResponse) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StopWorkerResponse) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StopWorkerResponse) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StopWorkerResponse_List is a list of StopWorkerResponse.
type StopWorkerResponse_List = capnp.StructList[StopWorkerResponse]

// NewStopWorkerResponse creates a new list of StopWorkerResponse.
func NewStopWorkerResponse_List(s *capnp.Segment, sz int32) (StopWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StopWorkerResponse](l), err
}

// StopWorkerResponse_Future is a wrapper for a StopWorkerResponse promised by a client call.
type StopWorkerResponse_Future struct{ *capnp.Future }

func (f StopWorkerResponse_Future) Struct() (StopWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return StopWorkerResponse(p.Struct()), err
}

type UpdateWorkerStatus capnp.Struct

// UpdateWorkerStatus_TypeID is the unique identifier for the type UpdateWorkerStatus.
const UpdateWorkerStatus_TypeID = 0xa62a70011c9fd5df

func NewUpdateWorkerStatus(s *capnp.Segment) (UpdateWorkerStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UpdateWorkerStatus(st), err
}

func NewRootUpdateWorkerStatus(s *capnp.Segment) (UpdateWorkerStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UpdateWorkerStatus(st), err
}

func ReadRootUpdateWorkerStatus(msg *capnp.Message) (UpdateWorkerStatus, error) {
	root, err := msg.Root()
	return UpdateWorkerStatus(root.Struct()), err
}

func (s UpdateWorkerStatus) String() string {
	str, _ := text.Marshal(0xa62a70011c9fd5df, capnp.Struct(s))
	return str
}

func (s UpdateWorkerStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UpdateWorkerStatus) DecodeFromPtr(p capnp.Ptr) UpdateWorkerStatus {
	return UpdateWorkerStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UpdateWorkerStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UpdateWorkerStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UpdateWorkerStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UpdateWorkerStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UpdateWorkerStatus) Status() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s UpdateWorkerStatus) SetStatus(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// UpdateWorkerStatus_List is a list of UpdateWorkerStatus.
type UpdateWorkerStatus_List = capnp.StructList[UpdateWorkerStatus]

// NewUpdateWorkerStatus creates a new list of UpdateWorkerStatus.
func NewUpdateWorkerStatus_List(s *capnp.Segment, sz int32) (UpdateWorkerStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[UpdateWorkerStatus](l), err
}

// UpdateWorkerStatus_Future is a wrapper for a UpdateWorkerStatus promised by a client call.
type UpdateWorkerStatus_Future struct{ *capnp.Future }

func (f UpdateWorkerStatus_Future) Struct() (UpdateWorkerStatus, error) {
	p, err := f.Future.Ptr()
	return UpdateWorkerStatus(p.Struct()), err
}

type UpdateWorkerStdio capnp.Struct

// UpdateWorkerStdio_TypeID is the unique identifier for the type UpdateWorkerStdio.
const UpdateWorkerStdio_TypeID = 0xa76a3a9604a9e962

func NewUpdateWorkerStdio(s *capnp.Segment) (UpdateWorkerStdio, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UpdateWorkerStdio(st), err
}

func NewRootUpdateWorkerStdio(s *capnp.Segment) (UpdateWorkerStdio, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UpdateWorkerStdio(st), err
}

func ReadRootUpdateWorkerStdio(msg *capnp.Message) (UpdateWorkerStdio, error) {
	root, err := msg.Root()
	return UpdateWorkerStdio(root.Struct()), err
}

func (s UpdateWorkerStdio) String() string {
	str, _ := text.Marshal(0xa76a3a9604a9e962, capnp.Struct(s))
	return str
}

func (s UpdateWorkerStdio) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UpdateWorkerStdio) DecodeFromPtr(p capnp.Ptr) UpdateWorkerStdio {
	return UpdateWorkerStdio(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UpdateWorkerStdio) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UpdateWorkerStdio) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UpdateWorkerStdio) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UpdateWorkerStdio) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UpdateWorkerStdio) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s UpdateWorkerStdio) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UpdateWorkerStdio) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// UpdateWorkerStdio_List is a list of UpdateWorkerStdio.
type UpdateWorkerStdio_List = capnp.StructList[UpdateWorkerStdio]

// NewUpdateWorkerStdio creates a new list of UpdateWorkerStdio.
func NewUpdateWorkerStdio_List(s *capnp.Segment, sz int32) (UpdateWorkerStdio_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UpdateWorkerStdio](l), err
}

// UpdateWorkerStdio_Future is a wrapper for a UpdateWorkerStdio promised by a client call.
type UpdateWorkerStdio_Future struct{ *capnp.Future }

func (f UpdateWorkerStdio_Future) Struct() (UpdateWorkerStdio, error) {
	p, err := f.Future.Ptr()
	return UpdateWorkerStdio(p.Struct()), err
}

type UpdateClientInfo capnp.Struct

// UpdateClientInfo_TypeID is the unique identifier for the type UpdateClientInfo.
const UpdateClientInfo_TypeID = 0xa073b10fb899cbb0

func NewUpdateClientInfo(s *capnp.Segment) (UpdateClientInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return UpdateClientInfo(st), err
}

func NewRootUpdateClientInfo(s *capnp.Segment) (UpdateClientInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return UpdateClientInfo(st), err
}

func ReadRootUpdateClientInfo(msg *capnp.Message) (UpdateClientInfo, error) {
	root, err := msg.Root()
	return UpdateClientInfo(root.Struct()), err
}

func (s UpdateClientInfo) String() string {
	str, _ := text.Marshal(0xa073b10fb899cbb0, capnp.Struct(s))
	return str
}

func (s UpdateClientInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UpdateClientInfo) DecodeFromPtr(p capnp.Ptr) UpdateClientInfo {
	return UpdateClientInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UpdateClientInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UpdateClientInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UpdateClientInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UpdateClientInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UpdateClientInfo) Username() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UpdateClientInfo) HasUsername() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UpdateClientInfo) UsernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UpdateClientInfo) SetUsername(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UpdateClientInfo) Hostname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UpdateClientInfo) HasHostname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UpdateClientInfo) HostnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UpdateClientInfo) SetHostname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s UpdateClientInfo) System() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s UpdateClientInfo) HasSystem() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UpdateClientInfo) SystemBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s UpdateClientInfo) SetSystem(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s UpdateClientInfo) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s UpdateClientInfo) HasAddress() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UpdateClientInfo) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s UpdateClientInfo) SetAddress(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// UpdateClientInfo_List is a list of UpdateClientInfo.
type UpdateClientInfo_List = capnp.StructList[UpdateClientInfo]

// NewUpdateClientInfo creates a new list of UpdateClientInfo.
func NewUpdateClientInfo_List(s *capnp.Segment, sz int32) (UpdateClientInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[UpdateClientInfo](l), err
}

// UpdateClientInfo_Future is a wrapper for a UpdateClientInfo promised by a client call.
type UpdateClientInfo_Future struct{ *capnp.Future }

func (f UpdateClientInfo_Future) Struct() (UpdateClientInfo, error) {
	p, err := f.Future.Ptr()
	return UpdateClientInfo(p.Struct()), err
}

type Message capnp.Struct
type Message_content Message
type Message_content_Which uint16

const (
	Message_content_Which_startWorkerRequest  Message_content_Which = 0
	Message_content_Which_startWorkerResponse Message_content_Which = 1
	Message_content_Which_stopWorkerRequest   Message_content_Which = 2
	Message_content_Which_stopWorkerResponse  Message_content_Which = 3
	Message_content_Which_updateWorkerStatus  Message_content_Which = 4
	Message_content_Which_updateWorkerStdio   Message_content_Which = 5
	Message_content_Which_updateClientInfo    Message_content_Which = 6
)

func (w Message_content_Which) String() string {
	const s = "startWorkerRequeststartWorkerResponsestopWorkerRequeststopWorkerResponseupdateWorkerStatusupdateWorkerStdioupdateClientInfo"
	switch w {
	case Message_content_Which_startWorkerRequest:
		return s[0:18]
	case Message_content_Which_startWorkerResponse:
		return s[18:37]
	case Message_content_Which_stopWorkerRequest:
		return s[37:54]
	case Message_content_Which_stopWorkerResponse:
		return s[54:72]
	case Message_content_Which_updateWorkerStatus:
		return s[72:90]
	case Message_content_Which_updateWorkerStdio:
		return s[90:107]
	case Message_content_Which_updateClientInfo:
		return s[107:123]

	}
	return "Message_content_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd270ea7f372f79cd

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd270ea7f372f79cd, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Content() Message_content { return Message_content(s) }

func (s Message_content) Which() Message_content_Which {
	return Message_content_Which(capnp.Struct(s).Uint16(0))
}
func (s Message_content) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_content) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_content) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_content) StartWorkerRequest() (StartWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != startWorkerRequest")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return StartWorkerRequest(p.Struct()), err
}

func (s Message_content) HasStartWorkerRequest() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetStartWorkerRequest(v StartWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartWorkerRequest sets the startWorkerRequest field to a newly
// allocated StartWorkerRequest struct, preferring placement in s's segment.
func (s Message_content) NewStartWorkerRequest() (StartWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewStartWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return StartWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) StartWorkerResponse() (StartWorkerResponse, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != startWorkerResponse")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return StartWorkerResponse(p.Struct()), err
}

func (s Message_content) HasStartWorkerResponse() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetStartWorkerResponse(v StartWorkerResponse) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartWorkerResponse sets the startWorkerResponse field to a newly
// allocated StartWorkerResponse struct, preferring placement in s's segment.
func (s Message_content) NewStartWorkerResponse() (StartWorkerResponse, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewStartWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return StartWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) StopWorkerRequest() (StopWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != stopWorkerRequest")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return StopWorkerRequest(p.Struct()), err
}

func (s Message_content) HasStopWorkerRequest() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetStopWorkerRequest(v StopWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStopWorkerRequest sets the stopWorkerRequest field to a newly
// allocated StopWorkerRequest struct, preferring placement in s's segment.
func (s Message_content) NewStopWorkerRequest() (StopWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewStopWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return StopWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) StopWorkerResponse() (StopWorkerResponse, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != stopWorkerResponse")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return StopWorkerResponse(p.Struct()), err
}

func (s Message_content) HasStopWorkerResponse() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetStopWorkerResponse(v StopWorkerResponse) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStopWorkerResponse sets the stopWorkerResponse field to a newly
// allocated StopWorkerResponse struct, preferring placement in s's segment.
func (s Message_content) NewStopWorkerResponse() (StopWorkerResponse, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewStopWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return StopWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) UpdateWorkerStatus() (UpdateWorkerStatus, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != updateWorkerStatus")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UpdateWorkerStatus(p.Struct()), err
}

func (s Message_content) HasUpdateWorkerStatus() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetUpdateWorkerStatus(v UpdateWorkerStatus) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUpdateWorkerStatus sets the updateWorkerStatus field to a newly
// allocated UpdateWorkerStatus struct, preferring placement in s's segment.
func (s Message_content) NewUpdateWorkerStatus() (UpdateWorkerStatus, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewUpdateWorkerStatus(capnp.Struct(s).Segment())
	if err != nil {
		return UpdateWorkerStatus{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) UpdateWorkerStdio() (UpdateWorkerStdio, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != updateWorkerStdio")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UpdateWorkerStdio(p.Struct()), err
}

func (s Message_content) HasUpdateWorkerStdio() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetUpdateWorkerStdio(v UpdateWorkerStdio) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUpdateWorkerStdio sets the updateWorkerStdio field to a newly
// allocated UpdateWorkerStdio struct, preferring placement in s's segment.
func (s Message_content) NewUpdateWorkerStdio() (UpdateWorkerStdio, error) {
	capnp.Struct(s).SetUint16(0, 5)
	ss, err := NewUpdateWorkerStdio(capnp.Struct(s).Segment())
	if err != nil {
		return UpdateWorkerStdio{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) UpdateClientInfo() (UpdateClientInfo, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != updateClientInfo")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UpdateClientInfo(p.Struct()), err
}

func (s Message_content) HasUpdateClientInfo() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetUpdateClientInfo(v UpdateClientInfo) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUpdateClientInfo sets the updateClientInfo field to a newly
// allocated UpdateClientInfo struct, preferring placement in s's segment.
func (s Message_content) NewUpdateClientInfo() (UpdateClientInfo, error) {
	capnp.Struct(s).SetUint16(0, 6)
	ss, err := NewUpdateClientInfo(capnp.Struct(s).Segment())
	if err != nil {
		return UpdateClientInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Content() Message_content_Future { return Message_content_Future{p.Future} }

// Message_content_Future is a wrapper for a Message_content promised by a client call.
type Message_content_Future struct{ *capnp.Future }

func (f Message_content_Future) Struct() (Message_content, error) {
	p, err := f.Future.Ptr()
	return Message_content(p.Struct()), err
}
func (p Message_content_Future) StartWorkerRequest() StartWorkerRequest_Future {
	return StartWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) StartWorkerResponse() StartWorkerResponse_Future {
	return StartWorkerResponse_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) StopWorkerRequest() StopWorkerRequest_Future {
	return StopWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) StopWorkerResponse() StopWorkerResponse_Future {
	return StopWorkerResponse_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) UpdateWorkerStatus() UpdateWorkerStatus_Future {
	return UpdateWorkerStatus_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) UpdateWorkerStdio() UpdateWorkerStdio_Future {
	return UpdateWorkerStdio_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) UpdateClientInfo() UpdateClientInfo_Future {
	return UpdateClientInfo_Future{Future: p.Future.Field(0, nil)}
}

const schema_dcccaa5d36aa8b70 = "x\xda\x8c\x94Oh\x1dU\x14\xc6\xcfw\xef\x9dy\x0a" +
	"o\x9a7\xcc[\xb4P\xd1\x0a.\x1aHb\xad\x7fh" +
	"@R\xd3v\xd1b\xa17\xa1T\x82\x85N\xf3n\xdb" +
	"\xd8\xd7\x99\xe9\xdc\xfb\xc4\xa2\x90\xbd\"B\x17\xa2\"T" +
	"\x8ah\x1b\x10[T\xe8V\xa8+-\x14\xc5E!\xe8" +
	"B\xd4V\xec\xa2\x98\x8d\x7f\xe2\x95;\xefe\xe6\xe5\x99" +
	"h\x96s\xf8\xcdw\xbfs\xcfw\xcf\xa3>\xdb-v" +
	"\x04\xf3\x82\x98|\xdc\xf3\xed\xe9w\x7fz\x7f\x94\x9f\x7f" +
	"\x8b\xc2\xcd\xb0\xd9k\x0bO\x1e]\xf8j\x91<^#" +
	"\xda\xf9\x08\x9bA\xb4\x8b\xd5\x88\xa2'\xd8\xc7\x04{\xe5" +
	"\xcb\xb7\xaf\x0d]\xd5\xef\x0d\xc0\xc2\xc1w\xd9\x01Dp" +
	"\xffE\xcb\xecg\x82\xfd\xfe\xdb\x0b[\x91\x0d\x7f@r" +
	"3\xfa\xe8\x02\xbe\xc5g\x10\xdd-\xe0;|\x82`\x8f" +
	"\xdf\xb9,\xde\x1c\x7f\xe1\xc3\x01e8\xf8~1\x85\xe8" +
	"\x01\xf7_\xb4E8\xf8\xca7\xfb\x92K{\x9f\xbf\xba" +
	"\x1a.\x84w9\xf6\xa0\xa8\x11\xb7\xe1\xc2\x91-\x17\xc7" +
	"\xd4\xa7$\x1f\x02\xec\x8dscO\xcd\xff\x92}M\x87" +
	"Q+T\xb7\x8bI\x10v\xee\x10o\x80`_\xbft" +
	"\xe1\xb7\x97\xc5\xd2\x17k\x9d\x7f\xcf;\x8e\xc8\xf3\xdd\xf9" +
	"\xf0\xdd\xf9\xa5\xd6\xea\xce\xba\xf46\x9f!\x1a)\xe8\xed" +
	"\x05\xfd\x89\xfeu\xdb\x0f\x1f]\xfen-\xe9\x11\x7f\x06" +
	"\xd13\x05\xfc\xb4?A#6\xcbS\x93\x8e\xcd\xc6\"" +
	"K\xb2\xb1\xe2ct6\xce\x92l|\xda\xc4\xb99\x92" +
	"\xe6\xa7U>\xa5\xcev\x14\xd7\xe6\x10 \xeb\\\x10\x09" +
	"\x10\x85\xfb\x86\x89\xe4n\x0e\xf9,C\x084\xe1\x8a\xfb" +
	"]q/\x87<\xc6\x102\xd6\x04#\x0a\x8f>L$" +
	"\x9f\xe3\x90\x86a\xe8\xc4\\[\xa1N\x0cu\xc2P\x9c" +
	"\x9f\xd4\xd8D8\xc4Q\xd46\x11j*yq\xa0\xb4" +
	"\xbe\xc9\xc3Y+6jO{N%f\x7fr\"%" +
	"r\x1e\x1b\xa5\xc7\xf8\x00\x91<\xc6!\xdb}\x1e\xe7\\" +
	"\xf1T\xd7N\xe9\xf1\xec8\x91ls\xc8\x97\x18B\xce" +
	"\x9b\xe0Dag\x92Hf\x1c\xf2\x15\x06\xdb\xd1*O" +
	"\xe23\x8a\x88V\xfc\xdbS\xa96\x03\xb5\x09}N\x1b" +
	"uf\xe5s>n\xb5r\xa5u\xf9\xcb\xff\xf4\xd2\xbd" +
	"\xf1i\x13\x1b\xde\xd1\xae\x19Q6\x138\x8b\xf7q\xc8" +
	"&\xc3\x846\xb1\xe9hx\xc4\xe0m\\\xb55\x87t" +
	"@t\xb8\x12\x1dj\xc5&F@\x0c\xc1\x7fIN\x9b" +
	"4\xeb\x0b\x86\x86\x0b\xc6\xfa\xf8A\xa5u|R\x8d\xce" +
	"\xa6\x89Q\x89!\xb9\x95\x8b\xba\xb5\xc5\xe9\x9f\xbdC$" +
	"\xafq\xc8\xeb\x0c\x01\xfe\xb6\xdd\x01}~\x91H^\xe7" +
	"\x907\x19\x02\xb6l\xbb\x13\xbaq\x9eH\xde\xe4\x90\x8b" +
	"\x0c\x01\xff\xcbvGt\xcb),r\xc8\xdb\x0c\x81\xf8" +
	"\xd36!\x88\xc2\x1f]\xf56\x87\\b\x08\xbc?l" +
	"\x13\x1eQx\xcf),qL\x81!\xf0\x7f\xb7M\xf8" +
	"D\xe1\xf2\xabDS\xe0\x98\xae\x83\xc1\xea^\xec\xd1\x97" +
	"{4\xaa\xadE@\x83\x061\x9d\xa5\xb5D+4\xaa" +
	"g]r\xdd\xbbBuYhT\xfbd-Jgi" +
	"\xc2\x0b\xb1\xf2!\xf7\xb0No\x96\xe8\x8b\x08\x1a\xd5\xde" +
	"[\x1bs3G\xa3Zx\xab\xa8=mTo\xc79" +
	"[Y\xb8=jc\xeb\xa1\xd7\xff@\xb2\x1e\xab\x92\xf5" +
	"\xa0\xca\xf34\xff\xd7\x1b\xe0\xebd\x85J%\xa0Z\xab" +
	"a0Il\xbe\x17\xa3\x8d\xc5\xb3w\x97\x1b5\xf6O" +
	"\x00\x00\x00\xff\xff\xe1D\xd8\x80"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_dcccaa5d36aa8b70,
		Nodes: []uint64{
			0x9892032ea4e69c6b,
			0xa073b10fb899cbb0,
			0xa62a70011c9fd5df,
			0xa76a3a9604a9e962,
			0xb15c44a86e45d3b0,
			0xb4652fa21957aa11,
			0xc5f4047bf39fa88d,
			0xd270ea7f372f79cd,
			0xdea9ade321ec73b3,
		},
		Compressed: true,
	})
}
