// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type CreateWorkerRequest capnp.Struct

// CreateWorkerRequest_TypeID is the unique identifier for the type CreateWorkerRequest.
const CreateWorkerRequest_TypeID = 0x9ef998d3f122950a

func NewCreateWorkerRequest(s *capnp.Segment) (CreateWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CreateWorkerRequest(st), err
}

func NewRootCreateWorkerRequest(s *capnp.Segment) (CreateWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CreateWorkerRequest(st), err
}

func ReadRootCreateWorkerRequest(msg *capnp.Message) (CreateWorkerRequest, error) {
	root, err := msg.Root()
	return CreateWorkerRequest(root.Struct()), err
}

func (s CreateWorkerRequest) String() string {
	str, _ := text.Marshal(0x9ef998d3f122950a, capnp.Struct(s))
	return str
}

func (s CreateWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateWorkerRequest) DecodeFromPtr(p capnp.Ptr) CreateWorkerRequest {
	return CreateWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CreateWorkerRequest_List is a list of CreateWorkerRequest.
type CreateWorkerRequest_List = capnp.StructList[CreateWorkerRequest]

// NewCreateWorkerRequest creates a new list of CreateWorkerRequest.
func NewCreateWorkerRequest_List(s *capnp.Segment, sz int32) (CreateWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CreateWorkerRequest](l), err
}

// CreateWorkerRequest_Future is a wrapper for a CreateWorkerRequest promised by a client call.
type CreateWorkerRequest_Future struct{ *capnp.Future }

func (f CreateWorkerRequest_Future) Struct() (CreateWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return CreateWorkerRequest(p.Struct()), err
}

type CreateWorkerResponse capnp.Struct

// CreateWorkerResponse_TypeID is the unique identifier for the type CreateWorkerResponse.
const CreateWorkerResponse_TypeID = 0xa0a1e306e1a52cac

func NewCreateWorkerResponse(s *capnp.Segment) (CreateWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CreateWorkerResponse(st), err
}

func NewRootCreateWorkerResponse(s *capnp.Segment) (CreateWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CreateWorkerResponse(st), err
}

func ReadRootCreateWorkerResponse(msg *capnp.Message) (CreateWorkerResponse, error) {
	root, err := msg.Root()
	return CreateWorkerResponse(root.Struct()), err
}

func (s CreateWorkerResponse) String() string {
	str, _ := text.Marshal(0xa0a1e306e1a52cac, capnp.Struct(s))
	return str
}

func (s CreateWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateWorkerResponse) DecodeFromPtr(p capnp.Ptr) CreateWorkerResponse {
	return CreateWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateWorkerResponse) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s CreateWorkerResponse) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// CreateWorkerResponse_List is a list of CreateWorkerResponse.
type CreateWorkerResponse_List = capnp.StructList[CreateWorkerResponse]

// NewCreateWorkerResponse creates a new list of CreateWorkerResponse.
func NewCreateWorkerResponse_List(s *capnp.Segment, sz int32) (CreateWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CreateWorkerResponse](l), err
}

// CreateWorkerResponse_Future is a wrapper for a CreateWorkerResponse promised by a client call.
type CreateWorkerResponse_Future struct{ *capnp.Future }

func (f CreateWorkerResponse_Future) Struct() (CreateWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return CreateWorkerResponse(p.Struct()), err
}

type GetWorkerRequest capnp.Struct

// GetWorkerRequest_TypeID is the unique identifier for the type GetWorkerRequest.
const GetWorkerRequest_TypeID = 0xefd403356091c80a

func NewGetWorkerRequest(s *capnp.Segment) (GetWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetWorkerRequest(st), err
}

func NewRootGetWorkerRequest(s *capnp.Segment) (GetWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetWorkerRequest(st), err
}

func ReadRootGetWorkerRequest(msg *capnp.Message) (GetWorkerRequest, error) {
	root, err := msg.Root()
	return GetWorkerRequest(root.Struct()), err
}

func (s GetWorkerRequest) String() string {
	str, _ := text.Marshal(0xefd403356091c80a, capnp.Struct(s))
	return str
}

func (s GetWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetWorkerRequest) DecodeFromPtr(p capnp.Ptr) GetWorkerRequest {
	return GetWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetWorkerRequest) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s GetWorkerRequest) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// GetWorkerRequest_List is a list of GetWorkerRequest.
type GetWorkerRequest_List = capnp.StructList[GetWorkerRequest]

// NewGetWorkerRequest creates a new list of GetWorkerRequest.
func NewGetWorkerRequest_List(s *capnp.Segment, sz int32) (GetWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GetWorkerRequest](l), err
}

// GetWorkerRequest_Future is a wrapper for a GetWorkerRequest promised by a client call.
type GetWorkerRequest_Future struct{ *capnp.Future }

func (f GetWorkerRequest_Future) Struct() (GetWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return GetWorkerRequest(p.Struct()), err
}

type GetWorkerResponse capnp.Struct

// GetWorkerResponse_TypeID is the unique identifier for the type GetWorkerResponse.
const GetWorkerResponse_TypeID = 0xcedd0be75e2ec289

func NewGetWorkerResponse(s *capnp.Segment) (GetWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetWorkerResponse(st), err
}

func NewRootGetWorkerResponse(s *capnp.Segment) (GetWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetWorkerResponse(st), err
}

func ReadRootGetWorkerResponse(msg *capnp.Message) (GetWorkerResponse, error) {
	root, err := msg.Root()
	return GetWorkerResponse(root.Struct()), err
}

func (s GetWorkerResponse) String() string {
	str, _ := text.Marshal(0xcedd0be75e2ec289, capnp.Struct(s))
	return str
}

func (s GetWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetWorkerResponse) DecodeFromPtr(p capnp.Ptr) GetWorkerResponse {
	return GetWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetWorkerResponse) ServiceName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GetWorkerResponse) HasServiceName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GetWorkerResponse) ServiceNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GetWorkerResponse) SetServiceName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GetWorkerResponse) ServiceId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GetWorkerResponse) HasServiceId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GetWorkerResponse) ServiceIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GetWorkerResponse) SetServiceId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GetWorkerResponse_List is a list of GetWorkerResponse.
type GetWorkerResponse_List = capnp.StructList[GetWorkerResponse]

// NewGetWorkerResponse creates a new list of GetWorkerResponse.
func NewGetWorkerResponse_List(s *capnp.Segment, sz int32) (GetWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GetWorkerResponse](l), err
}

// GetWorkerResponse_Future is a wrapper for a GetWorkerResponse promised by a client call.
type GetWorkerResponse_Future struct{ *capnp.Future }

func (f GetWorkerResponse_Future) Struct() (GetWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return GetWorkerResponse(p.Struct()), err
}

type DestroyWorkerRequest capnp.Struct

// DestroyWorkerRequest_TypeID is the unique identifier for the type DestroyWorkerRequest.
const DestroyWorkerRequest_TypeID = 0xe66541250dc00ccd

func NewDestroyWorkerRequest(s *capnp.Segment) (DestroyWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DestroyWorkerRequest(st), err
}

func NewRootDestroyWorkerRequest(s *capnp.Segment) (DestroyWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DestroyWorkerRequest(st), err
}

func ReadRootDestroyWorkerRequest(msg *capnp.Message) (DestroyWorkerRequest, error) {
	root, err := msg.Root()
	return DestroyWorkerRequest(root.Struct()), err
}

func (s DestroyWorkerRequest) String() string {
	str, _ := text.Marshal(0xe66541250dc00ccd, capnp.Struct(s))
	return str
}

func (s DestroyWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DestroyWorkerRequest) DecodeFromPtr(p capnp.Ptr) DestroyWorkerRequest {
	return DestroyWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DestroyWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DestroyWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DestroyWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DestroyWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DestroyWorkerRequest) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s DestroyWorkerRequest) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// DestroyWorkerRequest_List is a list of DestroyWorkerRequest.
type DestroyWorkerRequest_List = capnp.StructList[DestroyWorkerRequest]

// NewDestroyWorkerRequest creates a new list of DestroyWorkerRequest.
func NewDestroyWorkerRequest_List(s *capnp.Segment, sz int32) (DestroyWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DestroyWorkerRequest](l), err
}

// DestroyWorkerRequest_Future is a wrapper for a DestroyWorkerRequest promised by a client call.
type DestroyWorkerRequest_Future struct{ *capnp.Future }

func (f DestroyWorkerRequest_Future) Struct() (DestroyWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return DestroyWorkerRequest(p.Struct()), err
}

type DestroyWorkerResponse capnp.Struct

// DestroyWorkerResponse_TypeID is the unique identifier for the type DestroyWorkerResponse.
const DestroyWorkerResponse_TypeID = 0xaf87f588c4828158

func NewDestroyWorkerResponse(s *capnp.Segment) (DestroyWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DestroyWorkerResponse(st), err
}

func NewRootDestroyWorkerResponse(s *capnp.Segment) (DestroyWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DestroyWorkerResponse(st), err
}

func ReadRootDestroyWorkerResponse(msg *capnp.Message) (DestroyWorkerResponse, error) {
	root, err := msg.Root()
	return DestroyWorkerResponse(root.Struct()), err
}

func (s DestroyWorkerResponse) String() string {
	str, _ := text.Marshal(0xaf87f588c4828158, capnp.Struct(s))
	return str
}

func (s DestroyWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DestroyWorkerResponse) DecodeFromPtr(p capnp.Ptr) DestroyWorkerResponse {
	return DestroyWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DestroyWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DestroyWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DestroyWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DestroyWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// DestroyWorkerResponse_List is a list of DestroyWorkerResponse.
type DestroyWorkerResponse_List = capnp.StructList[DestroyWorkerResponse]

// NewDestroyWorkerResponse creates a new list of DestroyWorkerResponse.
func NewDestroyWorkerResponse_List(s *capnp.Segment, sz int32) (DestroyWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[DestroyWorkerResponse](l), err
}

// DestroyWorkerResponse_Future is a wrapper for a DestroyWorkerResponse promised by a client call.
type DestroyWorkerResponse_Future struct{ *capnp.Future }

func (f DestroyWorkerResponse_Future) Struct() (DestroyWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return DestroyWorkerResponse(p.Struct()), err
}

type ExecuteRequest capnp.Struct

// ExecuteRequest_TypeID is the unique identifier for the type ExecuteRequest.
const ExecuteRequest_TypeID = 0xb0d29ba9b094b66c

func NewExecuteRequest(s *capnp.Segment) (ExecuteRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExecuteRequest(st), err
}

func NewRootExecuteRequest(s *capnp.Segment) (ExecuteRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExecuteRequest(st), err
}

func ReadRootExecuteRequest(msg *capnp.Message) (ExecuteRequest, error) {
	root, err := msg.Root()
	return ExecuteRequest(root.Struct()), err
}

func (s ExecuteRequest) String() string {
	str, _ := text.Marshal(0xb0d29ba9b094b66c, capnp.Struct(s))
	return str
}

func (s ExecuteRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExecuteRequest) DecodeFromPtr(p capnp.Ptr) ExecuteRequest {
	return ExecuteRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExecuteRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExecuteRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExecuteRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExecuteRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExecuteRequest) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s ExecuteRequest) HasArgs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExecuteRequest) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s ExecuteRequest) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ExecuteRequest) FilePath() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExecuteRequest) HasFilePath() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExecuteRequest) FilePathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExecuteRequest) SetFilePath(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ExecuteRequest_List is a list of ExecuteRequest.
type ExecuteRequest_List = capnp.StructList[ExecuteRequest]

// NewExecuteRequest creates a new list of ExecuteRequest.
func NewExecuteRequest_List(s *capnp.Segment, sz int32) (ExecuteRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ExecuteRequest](l), err
}

// ExecuteRequest_Future is a wrapper for a ExecuteRequest promised by a client call.
type ExecuteRequest_Future struct{ *capnp.Future }

func (f ExecuteRequest_Future) Struct() (ExecuteRequest, error) {
	p, err := f.Future.Ptr()
	return ExecuteRequest(p.Struct()), err
}

type ExecuteResponse capnp.Struct

// ExecuteResponse_TypeID is the unique identifier for the type ExecuteResponse.
const ExecuteResponse_TypeID = 0xe90efdeb78e6cc91

func NewExecuteResponse(s *capnp.Segment) (ExecuteResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExecuteResponse(st), err
}

func NewRootExecuteResponse(s *capnp.Segment) (ExecuteResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExecuteResponse(st), err
}

func ReadRootExecuteResponse(msg *capnp.Message) (ExecuteResponse, error) {
	root, err := msg.Root()
	return ExecuteResponse(root.Struct()), err
}

func (s ExecuteResponse) String() string {
	str, _ := text.Marshal(0xe90efdeb78e6cc91, capnp.Struct(s))
	return str
}

func (s ExecuteResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExecuteResponse) DecodeFromPtr(p capnp.Ptr) ExecuteResponse {
	return ExecuteResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExecuteResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExecuteResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExecuteResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExecuteResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExecuteResponse) Code() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ExecuteResponse) SetCode(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// ExecuteResponse_List is a list of ExecuteResponse.
type ExecuteResponse_List = capnp.StructList[ExecuteResponse]

// NewExecuteResponse creates a new list of ExecuteResponse.
func NewExecuteResponse_List(s *capnp.Segment, sz int32) (ExecuteResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExecuteResponse](l), err
}

// ExecuteResponse_Future is a wrapper for a ExecuteResponse promised by a client call.
type ExecuteResponse_Future struct{ *capnp.Future }

func (f ExecuteResponse_Future) Struct() (ExecuteResponse, error) {
	p, err := f.Future.Ptr()
	return ExecuteResponse(p.Struct()), err
}

type CreateJobRequest capnp.Struct

// CreateJobRequest_TypeID is the unique identifier for the type CreateJobRequest.
const CreateJobRequest_TypeID = 0x9e7e5542ccb176a6

func NewCreateJobRequest(s *capnp.Segment) (CreateJobRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CreateJobRequest(st), err
}

func NewRootCreateJobRequest(s *capnp.Segment) (CreateJobRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CreateJobRequest(st), err
}

func ReadRootCreateJobRequest(msg *capnp.Message) (CreateJobRequest, error) {
	root, err := msg.Root()
	return CreateJobRequest(root.Struct()), err
}

func (s CreateJobRequest) String() string {
	str, _ := text.Marshal(0x9e7e5542ccb176a6, capnp.Struct(s))
	return str
}

func (s CreateJobRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateJobRequest) DecodeFromPtr(p capnp.Ptr) CreateJobRequest {
	return CreateJobRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateJobRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateJobRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateJobRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateJobRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateJobRequest) Command() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CreateJobRequest) HasCommand() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CreateJobRequest) CommandBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CreateJobRequest) SetCommand(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CreateJobRequest) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s CreateJobRequest) HasArgs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CreateJobRequest) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CreateJobRequest) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CreateJobRequest) Env() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s CreateJobRequest) HasEnv() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CreateJobRequest) SetEnv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CreateJobRequest) NewEnv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// CreateJobRequest_List is a list of CreateJobRequest.
type CreateJobRequest_List = capnp.StructList[CreateJobRequest]

// NewCreateJobRequest creates a new list of CreateJobRequest.
func NewCreateJobRequest_List(s *capnp.Segment, sz int32) (CreateJobRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CreateJobRequest](l), err
}

// CreateJobRequest_Future is a wrapper for a CreateJobRequest promised by a client call.
type CreateJobRequest_Future struct{ *capnp.Future }

func (f CreateJobRequest_Future) Struct() (CreateJobRequest, error) {
	p, err := f.Future.Ptr()
	return CreateJobRequest(p.Struct()), err
}

type CreateJobResponse capnp.Struct

// CreateJobResponse_TypeID is the unique identifier for the type CreateJobResponse.
const CreateJobResponse_TypeID = 0xc9ceab3dbceab238

func NewCreateJobResponse(s *capnp.Segment) (CreateJobResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CreateJobResponse(st), err
}

func NewRootCreateJobResponse(s *capnp.Segment) (CreateJobResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CreateJobResponse(st), err
}

func ReadRootCreateJobResponse(msg *capnp.Message) (CreateJobResponse, error) {
	root, err := msg.Root()
	return CreateJobResponse(root.Struct()), err
}

func (s CreateJobResponse) String() string {
	str, _ := text.Marshal(0xc9ceab3dbceab238, capnp.Struct(s))
	return str
}

func (s CreateJobResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateJobResponse) DecodeFromPtr(p capnp.Ptr) CreateJobResponse {
	return CreateJobResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateJobResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateJobResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateJobResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateJobResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateJobResponse) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CreateJobResponse) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CreateJobResponse) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CreateJobResponse) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CreateJobResponse) StdinSubject() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CreateJobResponse) HasStdinSubject() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CreateJobResponse) StdinSubjectBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CreateJobResponse) SetStdinSubject(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CreateJobResponse) StdoutSubject() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CreateJobResponse) HasStdoutSubject() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CreateJobResponse) StdoutSubjectBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CreateJobResponse) SetStdoutSubject(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CreateJobResponse) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s CreateJobResponse) HasError() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CreateJobResponse) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s CreateJobResponse) SetError(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// CreateJobResponse_List is a list of CreateJobResponse.
type CreateJobResponse_List = capnp.StructList[CreateJobResponse]

// NewCreateJobResponse creates a new list of CreateJobResponse.
func NewCreateJobResponse_List(s *capnp.Segment, sz int32) (CreateJobResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[CreateJobResponse](l), err
}

// CreateJobResponse_Future is a wrapper for a CreateJobResponse promised by a client call.
type CreateJobResponse_Future struct{ *capnp.Future }

func (f CreateJobResponse_Future) Struct() (CreateJobResponse, error) {
	p, err := f.Future.Ptr()
	return CreateJobResponse(p.Struct()), err
}

type CancelJobRequest capnp.Struct

// CancelJobRequest_TypeID is the unique identifier for the type CancelJobRequest.
const CancelJobRequest_TypeID = 0xf9ab6f1da5c79224

func NewCancelJobRequest(s *capnp.Segment) (CancelJobRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CancelJobRequest(st), err
}

func NewRootCancelJobRequest(s *capnp.Segment) (CancelJobRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CancelJobRequest(st), err
}

func ReadRootCancelJobRequest(msg *capnp.Message) (CancelJobRequest, error) {
	root, err := msg.Root()
	return CancelJobRequest(root.Struct()), err
}

func (s CancelJobRequest) String() string {
	str, _ := text.Marshal(0xf9ab6f1da5c79224, capnp.Struct(s))
	return str
}

func (s CancelJobRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CancelJobRequest) DecodeFromPtr(p capnp.Ptr) CancelJobRequest {
	return CancelJobRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CancelJobRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CancelJobRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CancelJobRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CancelJobRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CancelJobRequest) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CancelJobRequest) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CancelJobRequest) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CancelJobRequest) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CancelJobRequest_List is a list of CancelJobRequest.
type CancelJobRequest_List = capnp.StructList[CancelJobRequest]

// NewCancelJobRequest creates a new list of CancelJobRequest.
func NewCancelJobRequest_List(s *capnp.Segment, sz int32) (CancelJobRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CancelJobRequest](l), err
}

// CancelJobRequest_Future is a wrapper for a CancelJobRequest promised by a client call.
type CancelJobRequest_Future struct{ *capnp.Future }

func (f CancelJobRequest_Future) Struct() (CancelJobRequest, error) {
	p, err := f.Future.Ptr()
	return CancelJobRequest(p.Struct()), err
}

type CancelJobResponse capnp.Struct

// CancelJobResponse_TypeID is the unique identifier for the type CancelJobResponse.
const CancelJobResponse_TypeID = 0x9ad5eb801be0a338

func NewCancelJobResponse(s *capnp.Segment) (CancelJobResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CancelJobResponse(st), err
}

func NewRootCancelJobResponse(s *capnp.Segment) (CancelJobResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CancelJobResponse(st), err
}

func ReadRootCancelJobResponse(msg *capnp.Message) (CancelJobResponse, error) {
	root, err := msg.Root()
	return CancelJobResponse(root.Struct()), err
}

func (s CancelJobResponse) String() string {
	str, _ := text.Marshal(0x9ad5eb801be0a338, capnp.Struct(s))
	return str
}

func (s CancelJobResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CancelJobResponse) DecodeFromPtr(p capnp.Ptr) CancelJobResponse {
	return CancelJobResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CancelJobResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CancelJobResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CancelJobResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CancelJobResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CancelJobResponse) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CancelJobResponse) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CancelJobResponse) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CancelJobResponse) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CancelJobResponse_List is a list of CancelJobResponse.
type CancelJobResponse_List = capnp.StructList[CancelJobResponse]

// NewCancelJobResponse creates a new list of CancelJobResponse.
func NewCancelJobResponse_List(s *capnp.Segment, sz int32) (CancelJobResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CancelJobResponse](l), err
}

// CancelJobResponse_Future is a wrapper for a CancelJobResponse promised by a client call.
type CancelJobResponse_Future struct{ *capnp.Future }

func (f CancelJobResponse_Future) Struct() (CancelJobResponse, error) {
	p, err := f.Future.Ptr()
	return CancelJobResponse(p.Struct()), err
}

type UpdateJob capnp.Struct

// UpdateJob_TypeID is the unique identifier for the type UpdateJob.
const UpdateJob_TypeID = 0xd712faed705c2898

func NewUpdateJob(s *capnp.Segment) (UpdateJob, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return UpdateJob(st), err
}

func NewRootUpdateJob(s *capnp.Segment) (UpdateJob, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return UpdateJob(st), err
}

func ReadRootUpdateJob(msg *capnp.Message) (UpdateJob, error) {
	root, err := msg.Root()
	return UpdateJob(root.Struct()), err
}

func (s UpdateJob) String() string {
	str, _ := text.Marshal(0xd712faed705c2898, capnp.Struct(s))
	return str
}

func (s UpdateJob) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UpdateJob) DecodeFromPtr(p capnp.Ptr) UpdateJob {
	return UpdateJob(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UpdateJob) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UpdateJob) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UpdateJob) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UpdateJob) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UpdateJob) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UpdateJob) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UpdateJob) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UpdateJob) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UpdateJob) ExitStatus() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s UpdateJob) SetExitStatus(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// UpdateJob_List is a list of UpdateJob.
type UpdateJob_List = capnp.StructList[UpdateJob]

// NewUpdateJob creates a new list of UpdateJob.
func NewUpdateJob_List(s *capnp.Segment, sz int32) (UpdateJob_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[UpdateJob](l), err
}

// UpdateJob_Future is a wrapper for a UpdateJob promised by a client call.
type UpdateJob_Future struct{ *capnp.Future }

func (f UpdateJob_Future) Struct() (UpdateJob, error) {
	p, err := f.Future.Ptr()
	return UpdateJob(p.Struct()), err
}

type DummyRequest capnp.Struct

// DummyRequest_TypeID is the unique identifier for the type DummyRequest.
const DummyRequest_TypeID = 0xe682110f8663cbd4

func NewDummyRequest(s *capnp.Segment) (DummyRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DummyRequest(st), err
}

func NewRootDummyRequest(s *capnp.Segment) (DummyRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DummyRequest(st), err
}

func ReadRootDummyRequest(msg *capnp.Message) (DummyRequest, error) {
	root, err := msg.Root()
	return DummyRequest(root.Struct()), err
}

func (s DummyRequest) String() string {
	str, _ := text.Marshal(0xe682110f8663cbd4, capnp.Struct(s))
	return str
}

func (s DummyRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DummyRequest) DecodeFromPtr(p capnp.Ptr) DummyRequest {
	return DummyRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DummyRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DummyRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DummyRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DummyRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// DummyRequest_List is a list of DummyRequest.
type DummyRequest_List = capnp.StructList[DummyRequest]

// NewDummyRequest creates a new list of DummyRequest.
func NewDummyRequest_List(s *capnp.Segment, sz int32) (DummyRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[DummyRequest](l), err
}

// DummyRequest_Future is a wrapper for a DummyRequest promised by a client call.
type DummyRequest_Future struct{ *capnp.Future }

func (f DummyRequest_Future) Struct() (DummyRequest, error) {
	p, err := f.Future.Ptr()
	return DummyRequest(p.Struct()), err
}

type Message capnp.Struct
type Message_content Message
type Message_action Message
type Message_response Message
type Message_content_Which uint16

const (
	Message_content_Which_createJobRequest  Message_content_Which = 0
	Message_content_Which_cancelJobRequest  Message_content_Which = 1
	Message_content_Which_createJobResponse Message_content_Which = 2
	Message_content_Which_cancelJobResponse Message_content_Which = 3
	Message_content_Which_updateJob         Message_content_Which = 4
)

func (w Message_content_Which) String() string {
	const s = "createJobRequestcancelJobRequestcreateJobResponsecancelJobResponseupdateJob"
	switch w {
	case Message_content_Which_createJobRequest:
		return s[0:16]
	case Message_content_Which_cancelJobRequest:
		return s[16:32]
	case Message_content_Which_createJobResponse:
		return s[32:49]
	case Message_content_Which_cancelJobResponse:
		return s[49:66]
	case Message_content_Which_updateJob:
		return s[66:75]

	}
	return "Message_content_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Message_action_Which uint16

const (
	Message_action_Which_createWorker  Message_action_Which = 0
	Message_action_Which_destroyWorker Message_action_Which = 1
	Message_action_Which_getWorker     Message_action_Which = 2
	Message_action_Which_execute       Message_action_Which = 3
	Message_action_Which_createJob     Message_action_Which = 4
	Message_action_Which_cancelJob     Message_action_Which = 5
	Message_action_Which_dummyRequest  Message_action_Which = 6
)

func (w Message_action_Which) String() string {
	const s = "createWorkerdestroyWorkergetWorkerexecutecreateJobcancelJobdummyRequest"
	switch w {
	case Message_action_Which_createWorker:
		return s[0:12]
	case Message_action_Which_destroyWorker:
		return s[12:25]
	case Message_action_Which_getWorker:
		return s[25:34]
	case Message_action_Which_execute:
		return s[34:41]
	case Message_action_Which_createJob:
		return s[41:50]
	case Message_action_Which_cancelJob:
		return s[50:59]
	case Message_action_Which_dummyRequest:
		return s[59:71]

	}
	return "Message_action_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Message_response_Which uint16

const (
	Message_response_Which_createWorker  Message_response_Which = 0
	Message_response_Which_destroyWorker Message_response_Which = 1
	Message_response_Which_getWorker     Message_response_Which = 2
	Message_response_Which_execute       Message_response_Which = 3
	Message_response_Which_createJob     Message_response_Which = 4
	Message_response_Which_cancelJob     Message_response_Which = 5
	Message_response_Which_updateJob     Message_response_Which = 6
)

func (w Message_response_Which) String() string {
	const s = "createWorkerdestroyWorkergetWorkerexecutecreateJobcancelJobupdateJob"
	switch w {
	case Message_response_Which_createWorker:
		return s[0:12]
	case Message_response_Which_destroyWorker:
		return s[12:25]
	case Message_response_Which_getWorker:
		return s[25:34]
	case Message_response_Which_execute:
		return s[34:41]
	case Message_response_Which_createJob:
		return s[41:50]
	case Message_response_Which_cancelJob:
		return s[50:59]
	case Message_response_Which_updateJob:
		return s[59:68]

	}
	return "Message_response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd270ea7f372f79cd

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd270ea7f372f79cd, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Content() Message_content { return Message_content(s) }

func (s Message_content) Which() Message_content_Which {
	return Message_content_Which(capnp.Struct(s).Uint16(0))
}
func (s Message_content) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_content) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_content) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_content) CreateJobRequest() (CreateJobRequest, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != createJobRequest")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CreateJobRequest(p.Struct()), err
}

func (s Message_content) HasCreateJobRequest() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetCreateJobRequest(v CreateJobRequest) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCreateJobRequest sets the createJobRequest field to a newly
// allocated CreateJobRequest struct, preferring placement in s's segment.
func (s Message_content) NewCreateJobRequest() (CreateJobRequest, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewCreateJobRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CreateJobRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) CancelJobRequest() (CancelJobRequest, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != cancelJobRequest")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CancelJobRequest(p.Struct()), err
}

func (s Message_content) HasCancelJobRequest() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetCancelJobRequest(v CancelJobRequest) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCancelJobRequest sets the cancelJobRequest field to a newly
// allocated CancelJobRequest struct, preferring placement in s's segment.
func (s Message_content) NewCancelJobRequest() (CancelJobRequest, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewCancelJobRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CancelJobRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) CreateJobResponse() (CreateJobResponse, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != createJobResponse")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CreateJobResponse(p.Struct()), err
}

func (s Message_content) HasCreateJobResponse() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetCreateJobResponse(v CreateJobResponse) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCreateJobResponse sets the createJobResponse field to a newly
// allocated CreateJobResponse struct, preferring placement in s's segment.
func (s Message_content) NewCreateJobResponse() (CreateJobResponse, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewCreateJobResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CreateJobResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) CancelJobResponse() (CancelJobResponse, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != cancelJobResponse")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CancelJobResponse(p.Struct()), err
}

func (s Message_content) HasCancelJobResponse() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetCancelJobResponse(v CancelJobResponse) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCancelJobResponse sets the cancelJobResponse field to a newly
// allocated CancelJobResponse struct, preferring placement in s's segment.
func (s Message_content) NewCancelJobResponse() (CancelJobResponse, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewCancelJobResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CancelJobResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_content) UpdateJob() (UpdateJob, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != updateJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UpdateJob(p.Struct()), err
}

func (s Message_content) HasUpdateJob() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_content) SetUpdateJob(v UpdateJob) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUpdateJob sets the updateJob field to a newly
// allocated UpdateJob struct, preferring placement in s's segment.
func (s Message_content) NewUpdateJob() (UpdateJob, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewUpdateJob(capnp.Struct(s).Segment())
	if err != nil {
		return UpdateJob{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message) Action() Message_action { return Message_action(s) }

func (s Message_action) Which() Message_action_Which {
	return Message_action_Which(capnp.Struct(s).Uint16(2))
}
func (s Message_action) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_action) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_action) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_action) CreateWorker() (CreateWorkerRequest, error) {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != createWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return CreateWorkerRequest(p.Struct()), err
}

func (s Message_action) HasCreateWorker() bool {
	if capnp.Struct(s).Uint16(2) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_action) SetCreateWorker(v CreateWorkerRequest) error {
	capnp.Struct(s).SetUint16(2, 0)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCreateWorker sets the createWorker field to a newly
// allocated CreateWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewCreateWorker() (CreateWorkerRequest, error) {
	capnp.Struct(s).SetUint16(2, 0)
	ss, err := NewCreateWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CreateWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) DestroyWorker() (DestroyWorkerRequest, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != destroyWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return DestroyWorkerRequest(p.Struct()), err
}

func (s Message_action) HasDestroyWorker() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_action) SetDestroyWorker(v DestroyWorkerRequest) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDestroyWorker sets the destroyWorker field to a newly
// allocated DestroyWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewDestroyWorker() (DestroyWorkerRequest, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewDestroyWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return DestroyWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) GetWorker() (GetWorkerRequest, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != getWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return GetWorkerRequest(p.Struct()), err
}

func (s Message_action) HasGetWorker() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_action) SetGetWorker(v GetWorkerRequest) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewGetWorker sets the getWorker field to a newly
// allocated GetWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewGetWorker() (GetWorkerRequest, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewGetWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return GetWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) Execute() (ExecuteRequest, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != execute")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return ExecuteRequest(p.Struct()), err
}

func (s Message_action) HasExecute() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_action) SetExecute(v ExecuteRequest) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewExecute sets the execute field to a newly
// allocated ExecuteRequest struct, preferring placement in s's segment.
func (s Message_action) NewExecute() (ExecuteRequest, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewExecuteRequest(capnp.Struct(s).Segment())
	if err != nil {
		return ExecuteRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) CreateJob() (CreateJobRequest, error) {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != createJob")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return CreateJobRequest(p.Struct()), err
}

func (s Message_action) HasCreateJob() bool {
	if capnp.Struct(s).Uint16(2) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_action) SetCreateJob(v CreateJobRequest) error {
	capnp.Struct(s).SetUint16(2, 4)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCreateJob sets the createJob field to a newly
// allocated CreateJobRequest struct, preferring placement in s's segment.
func (s Message_action) NewCreateJob() (CreateJobRequest, error) {
	capnp.Struct(s).SetUint16(2, 4)
	ss, err := NewCreateJobRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CreateJobRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) CancelJob() (CancelJobRequest, error) {
	if capnp.Struct(s).Uint16(2) != 5 {
		panic("Which() != cancelJob")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return CancelJobRequest(p.Struct()), err
}

func (s Message_action) HasCancelJob() bool {
	if capnp.Struct(s).Uint16(2) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_action) SetCancelJob(v CancelJobRequest) error {
	capnp.Struct(s).SetUint16(2, 5)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCancelJob sets the cancelJob field to a newly
// allocated CancelJobRequest struct, preferring placement in s's segment.
func (s Message_action) NewCancelJob() (CancelJobRequest, error) {
	capnp.Struct(s).SetUint16(2, 5)
	ss, err := NewCancelJobRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CancelJobRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) DummyRequest() (DummyRequest, error) {
	if capnp.Struct(s).Uint16(2) != 6 {
		panic("Which() != dummyRequest")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return DummyRequest(p.Struct()), err
}

func (s Message_action) HasDummyRequest() bool {
	if capnp.Struct(s).Uint16(2) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_action) SetDummyRequest(v DummyRequest) error {
	capnp.Struct(s).SetUint16(2, 6)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDummyRequest sets the dummyRequest field to a newly
// allocated DummyRequest struct, preferring placement in s's segment.
func (s Message_action) NewDummyRequest() (DummyRequest, error) {
	capnp.Struct(s).SetUint16(2, 6)
	ss, err := NewDummyRequest(capnp.Struct(s).Segment())
	if err != nil {
		return DummyRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message) Response() Message_response { return Message_response(s) }

func (s Message_response) Which() Message_response_Which {
	return Message_response_Which(capnp.Struct(s).Uint16(4))
}
func (s Message_response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_response) CreateWorker() (CreateWorkerResponse, error) {
	if capnp.Struct(s).Uint16(4) != 0 {
		panic("Which() != createWorker")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return CreateWorkerResponse(p.Struct()), err
}

func (s Message_response) HasCreateWorker() bool {
	if capnp.Struct(s).Uint16(4) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Message_response) SetCreateWorker(v CreateWorkerResponse) error {
	capnp.Struct(s).SetUint16(4, 0)
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCreateWorker sets the createWorker field to a newly
// allocated CreateWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewCreateWorker() (CreateWorkerResponse, error) {
	capnp.Struct(s).SetUint16(4, 0)
	ss, err := NewCreateWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CreateWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) DestroyWorker() (DestroyWorkerResponse, error) {
	if capnp.Struct(s).Uint16(4) != 1 {
		panic("Which() != destroyWorker")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return DestroyWorkerResponse(p.Struct()), err
}

func (s Message_response) HasDestroyWorker() bool {
	if capnp.Struct(s).Uint16(4) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Message_response) SetDestroyWorker(v DestroyWorkerResponse) error {
	capnp.Struct(s).SetUint16(4, 1)
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDestroyWorker sets the destroyWorker field to a newly
// allocated DestroyWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewDestroyWorker() (DestroyWorkerResponse, error) {
	capnp.Struct(s).SetUint16(4, 1)
	ss, err := NewDestroyWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return DestroyWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) GetWorker() (GetWorkerResponse, error) {
	if capnp.Struct(s).Uint16(4) != 2 {
		panic("Which() != getWorker")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return GetWorkerResponse(p.Struct()), err
}

func (s Message_response) HasGetWorker() bool {
	if capnp.Struct(s).Uint16(4) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Message_response) SetGetWorker(v GetWorkerResponse) error {
	capnp.Struct(s).SetUint16(4, 2)
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewGetWorker sets the getWorker field to a newly
// allocated GetWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewGetWorker() (GetWorkerResponse, error) {
	capnp.Struct(s).SetUint16(4, 2)
	ss, err := NewGetWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return GetWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) Execute() (ExecuteResponse, error) {
	if capnp.Struct(s).Uint16(4) != 3 {
		panic("Which() != execute")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return ExecuteResponse(p.Struct()), err
}

func (s Message_response) HasExecute() bool {
	if capnp.Struct(s).Uint16(4) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Message_response) SetExecute(v ExecuteResponse) error {
	capnp.Struct(s).SetUint16(4, 3)
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewExecute sets the execute field to a newly
// allocated ExecuteResponse struct, preferring placement in s's segment.
func (s Message_response) NewExecute() (ExecuteResponse, error) {
	capnp.Struct(s).SetUint16(4, 3)
	ss, err := NewExecuteResponse(capnp.Struct(s).Segment())
	if err != nil {
		return ExecuteResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) CreateJob() (CreateJobResponse, error) {
	if capnp.Struct(s).Uint16(4) != 4 {
		panic("Which() != createJob")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return CreateJobResponse(p.Struct()), err
}

func (s Message_response) HasCreateJob() bool {
	if capnp.Struct(s).Uint16(4) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Message_response) SetCreateJob(v CreateJobResponse) error {
	capnp.Struct(s).SetUint16(4, 4)
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCreateJob sets the createJob field to a newly
// allocated CreateJobResponse struct, preferring placement in s's segment.
func (s Message_response) NewCreateJob() (CreateJobResponse, error) {
	capnp.Struct(s).SetUint16(4, 4)
	ss, err := NewCreateJobResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CreateJobResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) CancelJob() (CancelJobResponse, error) {
	if capnp.Struct(s).Uint16(4) != 5 {
		panic("Which() != cancelJob")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return CancelJobResponse(p.Struct()), err
}

func (s Message_response) HasCancelJob() bool {
	if capnp.Struct(s).Uint16(4) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Message_response) SetCancelJob(v CancelJobResponse) error {
	capnp.Struct(s).SetUint16(4, 5)
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCancelJob sets the cancelJob field to a newly
// allocated CancelJobResponse struct, preferring placement in s's segment.
func (s Message_response) NewCancelJob() (CancelJobResponse, error) {
	capnp.Struct(s).SetUint16(4, 5)
	ss, err := NewCancelJobResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CancelJobResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) UpdateJob() (UpdateJob, error) {
	if capnp.Struct(s).Uint16(4) != 6 {
		panic("Which() != updateJob")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return UpdateJob(p.Struct()), err
}

func (s Message_response) HasUpdateJob() bool {
	if capnp.Struct(s).Uint16(4) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Message_response) SetUpdateJob(v UpdateJob) error {
	capnp.Struct(s).SetUint16(4, 6)
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewUpdateJob sets the updateJob field to a newly
// allocated UpdateJob struct, preferring placement in s's segment.
func (s Message_response) NewUpdateJob() (UpdateJob, error) {
	capnp.Struct(s).SetUint16(4, 6)
	ss, err := NewUpdateJob(capnp.Struct(s).Segment())
	if err != nil {
		return UpdateJob{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Content() Message_content_Future { return Message_content_Future{p.Future} }

// Message_content_Future is a wrapper for a Message_content promised by a client call.
type Message_content_Future struct{ *capnp.Future }

func (f Message_content_Future) Struct() (Message_content, error) {
	p, err := f.Future.Ptr()
	return Message_content(p.Struct()), err
}
func (p Message_content_Future) CreateJobRequest() CreateJobRequest_Future {
	return CreateJobRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) CancelJobRequest() CancelJobRequest_Future {
	return CancelJobRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) CreateJobResponse() CreateJobResponse_Future {
	return CreateJobResponse_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) CancelJobResponse() CancelJobResponse_Future {
	return CancelJobResponse_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_content_Future) UpdateJob() UpdateJob_Future {
	return UpdateJob_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_Future) Action() Message_action_Future { return Message_action_Future{p.Future} }

// Message_action_Future is a wrapper for a Message_action promised by a client call.
type Message_action_Future struct{ *capnp.Future }

func (f Message_action_Future) Struct() (Message_action, error) {
	p, err := f.Future.Ptr()
	return Message_action(p.Struct()), err
}
func (p Message_action_Future) CreateWorker() CreateWorkerRequest_Future {
	return CreateWorkerRequest_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_action_Future) DestroyWorker() DestroyWorkerRequest_Future {
	return DestroyWorkerRequest_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_action_Future) GetWorker() GetWorkerRequest_Future {
	return GetWorkerRequest_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_action_Future) Execute() ExecuteRequest_Future {
	return ExecuteRequest_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_action_Future) CreateJob() CreateJobRequest_Future {
	return CreateJobRequest_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_action_Future) CancelJob() CancelJobRequest_Future {
	return CancelJobRequest_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_action_Future) DummyRequest() DummyRequest_Future {
	return DummyRequest_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_Future) Response() Message_response_Future { return Message_response_Future{p.Future} }

// Message_response_Future is a wrapper for a Message_response promised by a client call.
type Message_response_Future struct{ *capnp.Future }

func (f Message_response_Future) Struct() (Message_response, error) {
	p, err := f.Future.Ptr()
	return Message_response(p.Struct()), err
}
func (p Message_response_Future) CreateWorker() CreateWorkerResponse_Future {
	return CreateWorkerResponse_Future{Future: p.Future.Field(2, nil)}
}
func (p Message_response_Future) DestroyWorker() DestroyWorkerResponse_Future {
	return DestroyWorkerResponse_Future{Future: p.Future.Field(2, nil)}
}
func (p Message_response_Future) GetWorker() GetWorkerResponse_Future {
	return GetWorkerResponse_Future{Future: p.Future.Field(2, nil)}
}
func (p Message_response_Future) Execute() ExecuteResponse_Future {
	return ExecuteResponse_Future{Future: p.Future.Field(2, nil)}
}
func (p Message_response_Future) CreateJob() CreateJobResponse_Future {
	return CreateJobResponse_Future{Future: p.Future.Field(2, nil)}
}
func (p Message_response_Future) CancelJob() CancelJobResponse_Future {
	return CancelJobResponse_Future{Future: p.Future.Field(2, nil)}
}
func (p Message_response_Future) UpdateJob() UpdateJob_Future {
	return UpdateJob_Future{Future: p.Future.Field(2, nil)}
}

const schema_dcccaa5d36aa8b70 = "x\xda\xa4VklT\xd7\x11\x9e\xef\x9c}\xd8\xde]" +
	"\xef^v+A\xcb\xca-\x02\x09,\x8c\x01\xf7A-" +
	"\x90\xa9k\xd4b\xb5\x95\xcfR\xcbPA\xc5>Na" +
	"]\xef\xc3\xbbw\xa9\x91\xda\x1a\xa8\xfa\xa0\xa5\xaa@E" +
	"\xb1\x12%\x82\x00\x91\x02D@D\xa2\xfc\x00\x89D\x90" +
	"\x10\xc58\x84\x80\x12$\"\xe1$\x02\x01\x89\"\xa4\xf0" +
	"\x83\x87\xb9\xd1\xd9\xbd\xfb\xf0\xfa\xda&\xc9\xcf;\xe7\xbb" +
	"3s\xe6\x9b\xf9\xe6,\xfe\x92\xaf\xb4-\xf1<\xe5$" +
	"&\xd6\xda\x1d\xc6\xc8\xbe\x8f\x1bC\xbf\xdd\xfc7\x12\xdf" +
	"\x07\x8c\x0b[\x9b\x7f2x;}\x89\xba\xb9\x13N\xb0" +
	"\x96\x13\xbc\x13\x84\x96\xd3\xfc\x7f \x18\xcb\x0e\\\xff\xde" +
	"\xb6;W\x9e&m&\x8c\xf4\x7f\x0e\xffx\xc3\xe1\xe1" +
	"kd\x87\x93\xa8e\x83=\x04\x7f\xbf\xddI\xe4O\xd8" +
	"\xdb\x08\xc6\x0b[N\x0c\xb7w\xff\xf5\xb9*0W\xe0" +
	"\xff\xda;\xe1\xdf\x9f\x07?k?F0\xea\xf6\xce\xb9" +
	"\xfb\xfe\xd0\xfd*\xb0Ma\xbb\x1d\x11\xf8\xe3\x0e'q" +
	"\xe3\xe8\xc2C\xa3\x8eO\xf6\xef#1\x13\xd5\xb0U\x8e" +
	"^\xf8\xd79\x94\xcbn\x87\x8a\xbfv\xfb\x8e\xb3\xff\xba" +
	"\xf7\xcfc\x16.s\x8e\x0c\xfc;\xf3.\xfb^\xfd\xff" +
	"\xf1\x17\x9f\xb9t\xbc*K\xa6`\xd2\xd1\x0a\x7f.\xef" +
	"\xb2\xdf\xf1'\x82\xa1\x1d\xee\x99\xf5|\xb3<iQ," +
	";Q\xcb\xa8\xa3]\x15\xeb\x96\xa3A\x15kx\xd6\x81" +
	"\xb9#\xef\x1e{\xd3\xb2\xb2h\x09\xd6\xb4*\xf0\xbc\x9a" +
	"Be_\xbe}j\xc5\x91\x91\xb7\xab\xd2\xc8g{\xae" +
	"6\x04\xff\xd5Z\x95\xc6\x95\xda\x9b\x04c\xe7\x1b\x8b~" +
	"\x7f\xd3\xf5\xd1\x88U\xce'\xeaB\xf0\x9f\xabS\xe0\xd7" +
	"\xebT\xce\xa5\xc0\xe3kV\xe0a\x9e\x8b\xc1\xbf\xc4\xa5" +
	"\xd0M.\xc5\xc3\xd0\xfc\xf5\xe9\xcf\x1f\xcc\xf8\xa0\x1a\x9d" +
	"\xa78\xe7\x9a\x01\xff\xdf\xf3\xe8\xed\xae\xbco\xf7\x19\xcf" +
	"\xbc\x9f\xc9\x1bV|\x8c\xbaz\xe1\xbf\x97\x07\xdfu)" +
	">.\xbf\x13\xfd\x87W\xdbq\xc3\x82\x0f\xcd\xdd\x08\xff" +
	"\x0f\xdc\x8a\x8f\xdd\xc37\x06\xee\x8c\xd5\xdf\xb2r9\xe6" +
	"j\x87\xdf\xe3V.k\xdd\xcae\xdd\xf9\xdd\x1b\x7f\xc4" +
	"/\x7fa\x05^\xe0\xee\x84\x7fE\x1e\xfc\xd3<x\xee" +
	"\x9e\xb7\x0e\x05SG\xee[5\xef:\x05N\xe4\xc1q" +
	"w\x1b5\x19\xe9LJO5G\xc3\xb6t2\xdd\x9c" +
	"\xffX\x14\x0d\xa7\x93\xe9\xd6_\xcbl6\xbcI.\xca" +
	"\xc8l:\x95\xccJ\"1\x9b\xdbf\x1b\x06\x0b\xc0M" +
	"\xa4\xbd\xd2K$Nr\x883\x0cA<Vf\x0f\x91" +
	"v:C$Nq\x88\xf3\x0cA6\xa6\xcc\xf5D\xda" +
	"\xb9\x10\x918\xcb!.2\x04\xf9#e\xf6\x12i\x17" +
	"\xda\x89\xc4y\x0eq\x99!h{\xa8\xcc>\"\xed=" +
	"\x85\xbe\xc8!\xae1\x04\xed\x0f\x94Y#\xd2\xae*\xf3" +
	"\x87\x1c\xe2S\x86\xa0\xe3\xbe2\xcf \xd2F\x95\xf9:" +
	"\x87\xf8\x8c\xc1\x88fdX\x97=)\xf2f\xfe(3" +
	"\xf0\x95G\x89\x00\x1f\xc1\x88\xc9\xac\x9eIm\xed\xa1\x86" +
	"\x94\x89(\xcd\x8f\x89\xd8$\xf5\x1euFP\xa7\xa5\x1e" +
	",\x9c\x0e\xca\x01\x19\xcd\xe9\x12\xbe2\x83\xe6\x7f\x85\xd0" +
	"\x9d)B\x04\xber\xa3\x17O\xc3\xc9\xa8\xec+\x9d\x16" +
	"\x05\xc6<\xcd\xa5c\x15\xff\x96\x9a\xd3<\x9d\x94\xa4\x9f" +
	"\x9bN#\xa1\x02K\x90]\x80\xb0q\x1b\x91\x0dD\x9a" +
	"g)\x91\xa8\xe1\x10\x01\x86\x06\x99\xc9\xa42p\x13\x83" +
	"{J\x9f\xe65\"!\xd9\x9f\x93Y\x9dH\xf9t\x97" +
	"|\xaeR\x9c\xad\xe4\x10\xbfb\xd0\x80\x00\x94qu#" +
	"\x91\xe8\xe0\x10\x1b\x194\xc6\x02`D\xda\x869Db" +
	"-\x87\xd0\x19\x06\xa3\xa9D\"\x9c\x8c\x15\xe3{\xc3\x99" +
	"MY\xd4\x13\xba8\xf2\xb6z\x82S&\xb7T\x99\xa6" +
	"K3OTFe\xea\x94Y\xbd\x0bO\xfcC6\xed" +
	"U]]U\xae\xef\x96\xcb\xc5\xe31\xd4\x12C\xedT" +
	"It\x98\xcdTt\xda\x906\x9d\x96~\xe1\xd5\xbf\xac" +
	"*\xf4O\xa8\xadP]\x95@M)\x81\x05\xaa\x8cs" +
	"9\xc4\xca\x8a\xda\xae\xe8$\x12\xcb9\xc4/\x99e\xd9" +
	"\x8c?\xc4\xfbdWX\xdfLD\xd3\xd3[\x9c\xebh" +
	"*\xa9\xcb\xa4N\"\xc0mn\xc3\xc8\x87\xff\xcb\xbf\x89" +
	"\xc46\x0e\xb1\x8b\xc1\x83\xc7F!\xfeNe\xdd\xc5!" +
	"\x86\x18<l\xcc(\x90\xbbw\x0f\x91\x18\xe2\x10\x07\x19" +
	"<\xfc\x91\x11\x00'\xd2\xf6+\xebA\x0eq\x9c\xc1c" +
	"{h\x04`#\xd2^R\x13z\x94C\xbc\xc6\xcac" +
	"\x82r\x83\xc1W^\xa2U\xe32\x1eU\x92\xb6\xaa\x91" +
	"Cy\x00\xa6\x18\xbd*\xd47\x1aA>Y=\xdb\xc2" +
	"Q=\x9eJ\x9a\"\x89\x80Z\x94\x13D\x12\x018," +
	"D\x12\x01%\xce\x13D\x12\x01\xd4X\x88$\x02\xa8\xb5" +
	"\x10I\x04Pg!\x92\x08\xc0\xa5D\xb2w*\x91," +
	"\xbdJ&\x15\xc9\xd2\x06\xb4\x14\xc9\xd2~\x9a \x92\xa5" +
	"g\x87\xa5HN\xc6z\xe1\xb4\x9a\xedX.\x91\xd8\x1a" +
	"\x92\xfd\xe4U\x0d\x01_y\xd3N\xab\x93eM\xab\xd0" +
	"I_i\xee\xc2J'\xd7s\x88\xcd\x15s'U\xc9" +
	"b\x1c\"]\xa1i\x09E]\x1f\x87\x18`\xd08/" +
	"t}N\xfd\x9e\xe6\x10\x7ffh\xe8MEVw\x94" +
	"\xe60\xab\xc7\xe2\xc95\xb9\x08y{eT\xaf4\xa7" +
	"r\xfa\x9a\x1c5D*\xedO\xaa\xd1\xbf0\xab\x9f\x19" +
	"w\x9f\x0a\x1d\x89\x10\x89\xf9\x1c\xe2\x87\x15\xf7Y\xa2:" +
	"c1\x87X\xce`defK<*\x7fC\xcep" +
	"B\x96\xd3*XW\x13b\x13\x92\x98\xac\xf3\xcb\xeb\x01" +
	"\x15\x0fG\xb5&\x18\x80\x8a\xe7\xa1\xd6\xd4J\x0c\x0c(" +
	"\xbf\xc5\xb5\xeft\x12\x1b4\xa5\xc8\x9c \xa3\xfc\xe2\xa0" +
	"\xc9\x83w\x9b\xd3\x8aH\xd5\xcd\x97\x9a\x0a\xbaXE/" +
	"\\\xbc\xe9wDb!\x87X6\x81\x1e9\x10\xd7\xd7" +
	"\xe8a\x9dx.\x0b;1\xd8\xbf\x86\xdc\xf7{\x8b\x0a" +
	"\xfe\xe4+d\xc2E:\xcc\xa6.\xfa\x9a<zqs" +
	"\x14\xcbS\x15\xb8\xb1\x1c\xd8\x1bM\xc5\xe4\xf4\xd7\xa9\xe8" +
	"\xa2\x8aM\xff-\xd6a\xc5s\xc4\xdaa\xe5sd\x1c" +
	"\x11_\x05\x00\x00\xff\xff;E\xe4L"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_dcccaa5d36aa8b70,
		Nodes: []uint64{
			0x836854522ae2a0ce,
			0x9ad5eb801be0a338,
			0x9e7e5542ccb176a6,
			0x9ef998d3f122950a,
			0xa0a1e306e1a52cac,
			0xaf87f588c4828158,
			0xb0d29ba9b094b66c,
			0xb4652fa21957aa11,
			0xc6afcfce24a319cc,
			0xc9ceab3dbceab238,
			0xcedd0be75e2ec289,
			0xd270ea7f372f79cd,
			0xd712faed705c2898,
			0xe66541250dc00ccd,
			0xe682110f8663cbd4,
			0xe90efdeb78e6cc91,
			0xefd403356091c80a,
			0xf9ab6f1da5c79224,
		},
		Compressed: true,
	})
}
