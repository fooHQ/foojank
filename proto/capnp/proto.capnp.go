// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type CreateWorkerRequest capnp.Struct

// CreateWorkerRequest_TypeID is the unique identifier for the type CreateWorkerRequest.
const CreateWorkerRequest_TypeID = 0x9ef998d3f122950a

func NewCreateWorkerRequest(s *capnp.Segment) (CreateWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CreateWorkerRequest(st), err
}

func NewRootCreateWorkerRequest(s *capnp.Segment) (CreateWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CreateWorkerRequest(st), err
}

func ReadRootCreateWorkerRequest(msg *capnp.Message) (CreateWorkerRequest, error) {
	root, err := msg.Root()
	return CreateWorkerRequest(root.Struct()), err
}

func (s CreateWorkerRequest) String() string {
	str, _ := text.Marshal(0x9ef998d3f122950a, capnp.Struct(s))
	return str
}

func (s CreateWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateWorkerRequest) DecodeFromPtr(p capnp.Ptr) CreateWorkerRequest {
	return CreateWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CreateWorkerRequest_List is a list of CreateWorkerRequest.
type CreateWorkerRequest_List = capnp.StructList[CreateWorkerRequest]

// NewCreateWorkerRequest creates a new list of CreateWorkerRequest.
func NewCreateWorkerRequest_List(s *capnp.Segment, sz int32) (CreateWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CreateWorkerRequest](l), err
}

// CreateWorkerRequest_Future is a wrapper for a CreateWorkerRequest promised by a client call.
type CreateWorkerRequest_Future struct{ *capnp.Future }

func (f CreateWorkerRequest_Future) Struct() (CreateWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return CreateWorkerRequest(p.Struct()), err
}

type CreateWorkerResponse capnp.Struct

// CreateWorkerResponse_TypeID is the unique identifier for the type CreateWorkerResponse.
const CreateWorkerResponse_TypeID = 0xa0a1e306e1a52cac

func NewCreateWorkerResponse(s *capnp.Segment) (CreateWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CreateWorkerResponse(st), err
}

func NewRootCreateWorkerResponse(s *capnp.Segment) (CreateWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CreateWorkerResponse(st), err
}

func ReadRootCreateWorkerResponse(msg *capnp.Message) (CreateWorkerResponse, error) {
	root, err := msg.Root()
	return CreateWorkerResponse(root.Struct()), err
}

func (s CreateWorkerResponse) String() string {
	str, _ := text.Marshal(0xa0a1e306e1a52cac, capnp.Struct(s))
	return str
}

func (s CreateWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateWorkerResponse) DecodeFromPtr(p capnp.Ptr) CreateWorkerResponse {
	return CreateWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateWorkerResponse) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s CreateWorkerResponse) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// CreateWorkerResponse_List is a list of CreateWorkerResponse.
type CreateWorkerResponse_List = capnp.StructList[CreateWorkerResponse]

// NewCreateWorkerResponse creates a new list of CreateWorkerResponse.
func NewCreateWorkerResponse_List(s *capnp.Segment, sz int32) (CreateWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CreateWorkerResponse](l), err
}

// CreateWorkerResponse_Future is a wrapper for a CreateWorkerResponse promised by a client call.
type CreateWorkerResponse_Future struct{ *capnp.Future }

func (f CreateWorkerResponse_Future) Struct() (CreateWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return CreateWorkerResponse(p.Struct()), err
}

type GetWorkerRequest capnp.Struct

// GetWorkerRequest_TypeID is the unique identifier for the type GetWorkerRequest.
const GetWorkerRequest_TypeID = 0xefd403356091c80a

func NewGetWorkerRequest(s *capnp.Segment) (GetWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetWorkerRequest(st), err
}

func NewRootGetWorkerRequest(s *capnp.Segment) (GetWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetWorkerRequest(st), err
}

func ReadRootGetWorkerRequest(msg *capnp.Message) (GetWorkerRequest, error) {
	root, err := msg.Root()
	return GetWorkerRequest(root.Struct()), err
}

func (s GetWorkerRequest) String() string {
	str, _ := text.Marshal(0xefd403356091c80a, capnp.Struct(s))
	return str
}

func (s GetWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetWorkerRequest) DecodeFromPtr(p capnp.Ptr) GetWorkerRequest {
	return GetWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetWorkerRequest) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s GetWorkerRequest) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// GetWorkerRequest_List is a list of GetWorkerRequest.
type GetWorkerRequest_List = capnp.StructList[GetWorkerRequest]

// NewGetWorkerRequest creates a new list of GetWorkerRequest.
func NewGetWorkerRequest_List(s *capnp.Segment, sz int32) (GetWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GetWorkerRequest](l), err
}

// GetWorkerRequest_Future is a wrapper for a GetWorkerRequest promised by a client call.
type GetWorkerRequest_Future struct{ *capnp.Future }

func (f GetWorkerRequest_Future) Struct() (GetWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return GetWorkerRequest(p.Struct()), err
}

type GetWorkerResponse capnp.Struct

// GetWorkerResponse_TypeID is the unique identifier for the type GetWorkerResponse.
const GetWorkerResponse_TypeID = 0xcedd0be75e2ec289

func NewGetWorkerResponse(s *capnp.Segment) (GetWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetWorkerResponse(st), err
}

func NewRootGetWorkerResponse(s *capnp.Segment) (GetWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetWorkerResponse(st), err
}

func ReadRootGetWorkerResponse(msg *capnp.Message) (GetWorkerResponse, error) {
	root, err := msg.Root()
	return GetWorkerResponse(root.Struct()), err
}

func (s GetWorkerResponse) String() string {
	str, _ := text.Marshal(0xcedd0be75e2ec289, capnp.Struct(s))
	return str
}

func (s GetWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetWorkerResponse) DecodeFromPtr(p capnp.Ptr) GetWorkerResponse {
	return GetWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetWorkerResponse) ServiceName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GetWorkerResponse) HasServiceName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GetWorkerResponse) ServiceNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GetWorkerResponse) SetServiceName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GetWorkerResponse) ServiceId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GetWorkerResponse) HasServiceId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GetWorkerResponse) ServiceIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GetWorkerResponse) SetServiceId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GetWorkerResponse_List is a list of GetWorkerResponse.
type GetWorkerResponse_List = capnp.StructList[GetWorkerResponse]

// NewGetWorkerResponse creates a new list of GetWorkerResponse.
func NewGetWorkerResponse_List(s *capnp.Segment, sz int32) (GetWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GetWorkerResponse](l), err
}

// GetWorkerResponse_Future is a wrapper for a GetWorkerResponse promised by a client call.
type GetWorkerResponse_Future struct{ *capnp.Future }

func (f GetWorkerResponse_Future) Struct() (GetWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return GetWorkerResponse(p.Struct()), err
}

type DestroyWorkerRequest capnp.Struct

// DestroyWorkerRequest_TypeID is the unique identifier for the type DestroyWorkerRequest.
const DestroyWorkerRequest_TypeID = 0xe66541250dc00ccd

func NewDestroyWorkerRequest(s *capnp.Segment) (DestroyWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DestroyWorkerRequest(st), err
}

func NewRootDestroyWorkerRequest(s *capnp.Segment) (DestroyWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DestroyWorkerRequest(st), err
}

func ReadRootDestroyWorkerRequest(msg *capnp.Message) (DestroyWorkerRequest, error) {
	root, err := msg.Root()
	return DestroyWorkerRequest(root.Struct()), err
}

func (s DestroyWorkerRequest) String() string {
	str, _ := text.Marshal(0xe66541250dc00ccd, capnp.Struct(s))
	return str
}

func (s DestroyWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DestroyWorkerRequest) DecodeFromPtr(p capnp.Ptr) DestroyWorkerRequest {
	return DestroyWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DestroyWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DestroyWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DestroyWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DestroyWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DestroyWorkerRequest) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s DestroyWorkerRequest) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// DestroyWorkerRequest_List is a list of DestroyWorkerRequest.
type DestroyWorkerRequest_List = capnp.StructList[DestroyWorkerRequest]

// NewDestroyWorkerRequest creates a new list of DestroyWorkerRequest.
func NewDestroyWorkerRequest_List(s *capnp.Segment, sz int32) (DestroyWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DestroyWorkerRequest](l), err
}

// DestroyWorkerRequest_Future is a wrapper for a DestroyWorkerRequest promised by a client call.
type DestroyWorkerRequest_Future struct{ *capnp.Future }

func (f DestroyWorkerRequest_Future) Struct() (DestroyWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return DestroyWorkerRequest(p.Struct()), err
}

type DestroyWorkerResponse capnp.Struct

// DestroyWorkerResponse_TypeID is the unique identifier for the type DestroyWorkerResponse.
const DestroyWorkerResponse_TypeID = 0xaf87f588c4828158

func NewDestroyWorkerResponse(s *capnp.Segment) (DestroyWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DestroyWorkerResponse(st), err
}

func NewRootDestroyWorkerResponse(s *capnp.Segment) (DestroyWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DestroyWorkerResponse(st), err
}

func ReadRootDestroyWorkerResponse(msg *capnp.Message) (DestroyWorkerResponse, error) {
	root, err := msg.Root()
	return DestroyWorkerResponse(root.Struct()), err
}

func (s DestroyWorkerResponse) String() string {
	str, _ := text.Marshal(0xaf87f588c4828158, capnp.Struct(s))
	return str
}

func (s DestroyWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DestroyWorkerResponse) DecodeFromPtr(p capnp.Ptr) DestroyWorkerResponse {
	return DestroyWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DestroyWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DestroyWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DestroyWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DestroyWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// DestroyWorkerResponse_List is a list of DestroyWorkerResponse.
type DestroyWorkerResponse_List = capnp.StructList[DestroyWorkerResponse]

// NewDestroyWorkerResponse creates a new list of DestroyWorkerResponse.
func NewDestroyWorkerResponse_List(s *capnp.Segment, sz int32) (DestroyWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[DestroyWorkerResponse](l), err
}

// DestroyWorkerResponse_Future is a wrapper for a DestroyWorkerResponse promised by a client call.
type DestroyWorkerResponse_Future struct{ *capnp.Future }

func (f DestroyWorkerResponse_Future) Struct() (DestroyWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return DestroyWorkerResponse(p.Struct()), err
}

type ExecuteRequest capnp.Struct

// ExecuteRequest_TypeID is the unique identifier for the type ExecuteRequest.
const ExecuteRequest_TypeID = 0xb0d29ba9b094b66c

func NewExecuteRequest(s *capnp.Segment) (ExecuteRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExecuteRequest(st), err
}

func NewRootExecuteRequest(s *capnp.Segment) (ExecuteRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExecuteRequest(st), err
}

func ReadRootExecuteRequest(msg *capnp.Message) (ExecuteRequest, error) {
	root, err := msg.Root()
	return ExecuteRequest(root.Struct()), err
}

func (s ExecuteRequest) String() string {
	str, _ := text.Marshal(0xb0d29ba9b094b66c, capnp.Struct(s))
	return str
}

func (s ExecuteRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExecuteRequest) DecodeFromPtr(p capnp.Ptr) ExecuteRequest {
	return ExecuteRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExecuteRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExecuteRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExecuteRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExecuteRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExecuteRequest) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s ExecuteRequest) HasArgs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExecuteRequest) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s ExecuteRequest) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ExecuteRequest) FilePath() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExecuteRequest) HasFilePath() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExecuteRequest) FilePathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExecuteRequest) SetFilePath(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ExecuteRequest_List is a list of ExecuteRequest.
type ExecuteRequest_List = capnp.StructList[ExecuteRequest]

// NewExecuteRequest creates a new list of ExecuteRequest.
func NewExecuteRequest_List(s *capnp.Segment, sz int32) (ExecuteRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ExecuteRequest](l), err
}

// ExecuteRequest_Future is a wrapper for a ExecuteRequest promised by a client call.
type ExecuteRequest_Future struct{ *capnp.Future }

func (f ExecuteRequest_Future) Struct() (ExecuteRequest, error) {
	p, err := f.Future.Ptr()
	return ExecuteRequest(p.Struct()), err
}

type ExecuteResponse capnp.Struct

// ExecuteResponse_TypeID is the unique identifier for the type ExecuteResponse.
const ExecuteResponse_TypeID = 0xe90efdeb78e6cc91

func NewExecuteResponse(s *capnp.Segment) (ExecuteResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExecuteResponse(st), err
}

func NewRootExecuteResponse(s *capnp.Segment) (ExecuteResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExecuteResponse(st), err
}

func ReadRootExecuteResponse(msg *capnp.Message) (ExecuteResponse, error) {
	root, err := msg.Root()
	return ExecuteResponse(root.Struct()), err
}

func (s ExecuteResponse) String() string {
	str, _ := text.Marshal(0xe90efdeb78e6cc91, capnp.Struct(s))
	return str
}

func (s ExecuteResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExecuteResponse) DecodeFromPtr(p capnp.Ptr) ExecuteResponse {
	return ExecuteResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExecuteResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExecuteResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExecuteResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExecuteResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExecuteResponse) Code() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ExecuteResponse) SetCode(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// ExecuteResponse_List is a list of ExecuteResponse.
type ExecuteResponse_List = capnp.StructList[ExecuteResponse]

// NewExecuteResponse creates a new list of ExecuteResponse.
func NewExecuteResponse_List(s *capnp.Segment, sz int32) (ExecuteResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExecuteResponse](l), err
}

// ExecuteResponse_Future is a wrapper for a ExecuteResponse promised by a client call.
type ExecuteResponse_Future struct{ *capnp.Future }

func (f ExecuteResponse_Future) Struct() (ExecuteResponse, error) {
	p, err := f.Future.Ptr()
	return ExecuteResponse(p.Struct()), err
}

type CreateJobRequest capnp.Struct

// CreateJobRequest_TypeID is the unique identifier for the type CreateJobRequest.
const CreateJobRequest_TypeID = 0x9e7e5542ccb176a6

func NewCreateJobRequest(s *capnp.Segment) (CreateJobRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CreateJobRequest(st), err
}

func NewRootCreateJobRequest(s *capnp.Segment) (CreateJobRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CreateJobRequest(st), err
}

func ReadRootCreateJobRequest(msg *capnp.Message) (CreateJobRequest, error) {
	root, err := msg.Root()
	return CreateJobRequest(root.Struct()), err
}

func (s CreateJobRequest) String() string {
	str, _ := text.Marshal(0x9e7e5542ccb176a6, capnp.Struct(s))
	return str
}

func (s CreateJobRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateJobRequest) DecodeFromPtr(p capnp.Ptr) CreateJobRequest {
	return CreateJobRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateJobRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateJobRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateJobRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateJobRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateJobRequest) Command() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CreateJobRequest) HasCommand() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CreateJobRequest) CommandBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CreateJobRequest) SetCommand(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CreateJobRequest) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s CreateJobRequest) HasArgs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CreateJobRequest) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CreateJobRequest) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CreateJobRequest) Env() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s CreateJobRequest) HasEnv() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CreateJobRequest) SetEnv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CreateJobRequest) NewEnv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// CreateJobRequest_List is a list of CreateJobRequest.
type CreateJobRequest_List = capnp.StructList[CreateJobRequest]

// NewCreateJobRequest creates a new list of CreateJobRequest.
func NewCreateJobRequest_List(s *capnp.Segment, sz int32) (CreateJobRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CreateJobRequest](l), err
}

// CreateJobRequest_Future is a wrapper for a CreateJobRequest promised by a client call.
type CreateJobRequest_Future struct{ *capnp.Future }

func (f CreateJobRequest_Future) Struct() (CreateJobRequest, error) {
	p, err := f.Future.Ptr()
	return CreateJobRequest(p.Struct()), err
}

type CreateJobResponse capnp.Struct

// CreateJobResponse_TypeID is the unique identifier for the type CreateJobResponse.
const CreateJobResponse_TypeID = 0xc9ceab3dbceab238

func NewCreateJobResponse(s *capnp.Segment) (CreateJobResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CreateJobResponse(st), err
}

func NewRootCreateJobResponse(s *capnp.Segment) (CreateJobResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CreateJobResponse(st), err
}

func ReadRootCreateJobResponse(msg *capnp.Message) (CreateJobResponse, error) {
	root, err := msg.Root()
	return CreateJobResponse(root.Struct()), err
}

func (s CreateJobResponse) String() string {
	str, _ := text.Marshal(0xc9ceab3dbceab238, capnp.Struct(s))
	return str
}

func (s CreateJobResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateJobResponse) DecodeFromPtr(p capnp.Ptr) CreateJobResponse {
	return CreateJobResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateJobResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateJobResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateJobResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateJobResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateJobResponse) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CreateJobResponse) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CreateJobResponse) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CreateJobResponse) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CreateJobResponse) StdinSubject() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CreateJobResponse) HasStdinSubject() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CreateJobResponse) StdinSubjectBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CreateJobResponse) SetStdinSubject(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CreateJobResponse) StdoutSubject() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CreateJobResponse) HasStdoutSubject() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CreateJobResponse) StdoutSubjectBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CreateJobResponse) SetStdoutSubject(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CreateJobResponse) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s CreateJobResponse) HasError() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CreateJobResponse) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s CreateJobResponse) SetError(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// CreateJobResponse_List is a list of CreateJobResponse.
type CreateJobResponse_List = capnp.StructList[CreateJobResponse]

// NewCreateJobResponse creates a new list of CreateJobResponse.
func NewCreateJobResponse_List(s *capnp.Segment, sz int32) (CreateJobResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[CreateJobResponse](l), err
}

// CreateJobResponse_Future is a wrapper for a CreateJobResponse promised by a client call.
type CreateJobResponse_Future struct{ *capnp.Future }

func (f CreateJobResponse_Future) Struct() (CreateJobResponse, error) {
	p, err := f.Future.Ptr()
	return CreateJobResponse(p.Struct()), err
}

type CancelJobRequest capnp.Struct

// CancelJobRequest_TypeID is the unique identifier for the type CancelJobRequest.
const CancelJobRequest_TypeID = 0xf9ab6f1da5c79224

func NewCancelJobRequest(s *capnp.Segment) (CancelJobRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CancelJobRequest(st), err
}

func NewRootCancelJobRequest(s *capnp.Segment) (CancelJobRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CancelJobRequest(st), err
}

func ReadRootCancelJobRequest(msg *capnp.Message) (CancelJobRequest, error) {
	root, err := msg.Root()
	return CancelJobRequest(root.Struct()), err
}

func (s CancelJobRequest) String() string {
	str, _ := text.Marshal(0xf9ab6f1da5c79224, capnp.Struct(s))
	return str
}

func (s CancelJobRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CancelJobRequest) DecodeFromPtr(p capnp.Ptr) CancelJobRequest {
	return CancelJobRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CancelJobRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CancelJobRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CancelJobRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CancelJobRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CancelJobRequest) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CancelJobRequest) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CancelJobRequest) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CancelJobRequest) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CancelJobRequest_List is a list of CancelJobRequest.
type CancelJobRequest_List = capnp.StructList[CancelJobRequest]

// NewCancelJobRequest creates a new list of CancelJobRequest.
func NewCancelJobRequest_List(s *capnp.Segment, sz int32) (CancelJobRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CancelJobRequest](l), err
}

// CancelJobRequest_Future is a wrapper for a CancelJobRequest promised by a client call.
type CancelJobRequest_Future struct{ *capnp.Future }

func (f CancelJobRequest_Future) Struct() (CancelJobRequest, error) {
	p, err := f.Future.Ptr()
	return CancelJobRequest(p.Struct()), err
}

type CancelJobResponse capnp.Struct

// CancelJobResponse_TypeID is the unique identifier for the type CancelJobResponse.
const CancelJobResponse_TypeID = 0x9ad5eb801be0a338

func NewCancelJobResponse(s *capnp.Segment) (CancelJobResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CancelJobResponse(st), err
}

func NewRootCancelJobResponse(s *capnp.Segment) (CancelJobResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CancelJobResponse(st), err
}

func ReadRootCancelJobResponse(msg *capnp.Message) (CancelJobResponse, error) {
	root, err := msg.Root()
	return CancelJobResponse(root.Struct()), err
}

func (s CancelJobResponse) String() string {
	str, _ := text.Marshal(0x9ad5eb801be0a338, capnp.Struct(s))
	return str
}

func (s CancelJobResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CancelJobResponse) DecodeFromPtr(p capnp.Ptr) CancelJobResponse {
	return CancelJobResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CancelJobResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CancelJobResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CancelJobResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CancelJobResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CancelJobResponse) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CancelJobResponse) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CancelJobResponse) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CancelJobResponse) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CancelJobResponse_List is a list of CancelJobResponse.
type CancelJobResponse_List = capnp.StructList[CancelJobResponse]

// NewCancelJobResponse creates a new list of CancelJobResponse.
func NewCancelJobResponse_List(s *capnp.Segment, sz int32) (CancelJobResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CancelJobResponse](l), err
}

// CancelJobResponse_Future is a wrapper for a CancelJobResponse promised by a client call.
type CancelJobResponse_Future struct{ *capnp.Future }

func (f CancelJobResponse_Future) Struct() (CancelJobResponse, error) {
	p, err := f.Future.Ptr()
	return CancelJobResponse(p.Struct()), err
}

type UpdateJob capnp.Struct

// UpdateJob_TypeID is the unique identifier for the type UpdateJob.
const UpdateJob_TypeID = 0xd712faed705c2898

func NewUpdateJob(s *capnp.Segment) (UpdateJob, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return UpdateJob(st), err
}

func NewRootUpdateJob(s *capnp.Segment) (UpdateJob, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return UpdateJob(st), err
}

func ReadRootUpdateJob(msg *capnp.Message) (UpdateJob, error) {
	root, err := msg.Root()
	return UpdateJob(root.Struct()), err
}

func (s UpdateJob) String() string {
	str, _ := text.Marshal(0xd712faed705c2898, capnp.Struct(s))
	return str
}

func (s UpdateJob) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UpdateJob) DecodeFromPtr(p capnp.Ptr) UpdateJob {
	return UpdateJob(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UpdateJob) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UpdateJob) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UpdateJob) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UpdateJob) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UpdateJob) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UpdateJob) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UpdateJob) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UpdateJob) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UpdateJob) ExitStatus() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s UpdateJob) SetExitStatus(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// UpdateJob_List is a list of UpdateJob.
type UpdateJob_List = capnp.StructList[UpdateJob]

// NewUpdateJob creates a new list of UpdateJob.
func NewUpdateJob_List(s *capnp.Segment, sz int32) (UpdateJob_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[UpdateJob](l), err
}

// UpdateJob_Future is a wrapper for a UpdateJob promised by a client call.
type UpdateJob_Future struct{ *capnp.Future }

func (f UpdateJob_Future) Struct() (UpdateJob, error) {
	p, err := f.Future.Ptr()
	return UpdateJob(p.Struct()), err
}

type DummyRequest capnp.Struct

// DummyRequest_TypeID is the unique identifier for the type DummyRequest.
const DummyRequest_TypeID = 0xe682110f8663cbd4

func NewDummyRequest(s *capnp.Segment) (DummyRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DummyRequest(st), err
}

func NewRootDummyRequest(s *capnp.Segment) (DummyRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DummyRequest(st), err
}

func ReadRootDummyRequest(msg *capnp.Message) (DummyRequest, error) {
	root, err := msg.Root()
	return DummyRequest(root.Struct()), err
}

func (s DummyRequest) String() string {
	str, _ := text.Marshal(0xe682110f8663cbd4, capnp.Struct(s))
	return str
}

func (s DummyRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DummyRequest) DecodeFromPtr(p capnp.Ptr) DummyRequest {
	return DummyRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DummyRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DummyRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DummyRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DummyRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// DummyRequest_List is a list of DummyRequest.
type DummyRequest_List = capnp.StructList[DummyRequest]

// NewDummyRequest creates a new list of DummyRequest.
func NewDummyRequest_List(s *capnp.Segment, sz int32) (DummyRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[DummyRequest](l), err
}

// DummyRequest_Future is a wrapper for a DummyRequest promised by a client call.
type DummyRequest_Future struct{ *capnp.Future }

func (f DummyRequest_Future) Struct() (DummyRequest, error) {
	p, err := f.Future.Ptr()
	return DummyRequest(p.Struct()), err
}

type Message capnp.Struct
type Message_action Message
type Message_response Message
type Message_action_Which uint16

const (
	Message_action_Which_createWorker  Message_action_Which = 0
	Message_action_Which_destroyWorker Message_action_Which = 1
	Message_action_Which_getWorker     Message_action_Which = 2
	Message_action_Which_execute       Message_action_Which = 3
	Message_action_Which_createJob     Message_action_Which = 4
	Message_action_Which_cancelJob     Message_action_Which = 5
	Message_action_Which_dummyRequest  Message_action_Which = 6
)

func (w Message_action_Which) String() string {
	const s = "createWorkerdestroyWorkergetWorkerexecutecreateJobcancelJobdummyRequest"
	switch w {
	case Message_action_Which_createWorker:
		return s[0:12]
	case Message_action_Which_destroyWorker:
		return s[12:25]
	case Message_action_Which_getWorker:
		return s[25:34]
	case Message_action_Which_execute:
		return s[34:41]
	case Message_action_Which_createJob:
		return s[41:50]
	case Message_action_Which_cancelJob:
		return s[50:59]
	case Message_action_Which_dummyRequest:
		return s[59:71]

	}
	return "Message_action_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Message_response_Which uint16

const (
	Message_response_Which_createWorker  Message_response_Which = 0
	Message_response_Which_destroyWorker Message_response_Which = 1
	Message_response_Which_getWorker     Message_response_Which = 2
	Message_response_Which_execute       Message_response_Which = 3
	Message_response_Which_createJob     Message_response_Which = 4
	Message_response_Which_cancelJob     Message_response_Which = 5
	Message_response_Which_updateJob     Message_response_Which = 6
)

func (w Message_response_Which) String() string {
	const s = "createWorkerdestroyWorkergetWorkerexecutecreateJobcancelJobupdateJob"
	switch w {
	case Message_response_Which_createWorker:
		return s[0:12]
	case Message_response_Which_destroyWorker:
		return s[12:25]
	case Message_response_Which_getWorker:
		return s[25:34]
	case Message_response_Which_execute:
		return s[34:41]
	case Message_response_Which_createJob:
		return s[41:50]
	case Message_response_Which_cancelJob:
		return s[50:59]
	case Message_response_Which_updateJob:
		return s[59:68]

	}
	return "Message_response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd270ea7f372f79cd

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd270ea7f372f79cd, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Action() Message_action { return Message_action(s) }

func (s Message_action) Which() Message_action_Which {
	return Message_action_Which(capnp.Struct(s).Uint16(0))
}
func (s Message_action) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_action) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_action) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_action) CreateWorker() (CreateWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != createWorker")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CreateWorkerRequest(p.Struct()), err
}

func (s Message_action) HasCreateWorker() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetCreateWorker(v CreateWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCreateWorker sets the createWorker field to a newly
// allocated CreateWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewCreateWorker() (CreateWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewCreateWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CreateWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) DestroyWorker() (DestroyWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != destroyWorker")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DestroyWorkerRequest(p.Struct()), err
}

func (s Message_action) HasDestroyWorker() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetDestroyWorker(v DestroyWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDestroyWorker sets the destroyWorker field to a newly
// allocated DestroyWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewDestroyWorker() (DestroyWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewDestroyWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return DestroyWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) GetWorker() (GetWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != getWorker")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GetWorkerRequest(p.Struct()), err
}

func (s Message_action) HasGetWorker() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetGetWorker(v GetWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGetWorker sets the getWorker field to a newly
// allocated GetWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewGetWorker() (GetWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewGetWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return GetWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) Execute() (ExecuteRequest, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != execute")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ExecuteRequest(p.Struct()), err
}

func (s Message_action) HasExecute() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetExecute(v ExecuteRequest) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewExecute sets the execute field to a newly
// allocated ExecuteRequest struct, preferring placement in s's segment.
func (s Message_action) NewExecute() (ExecuteRequest, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewExecuteRequest(capnp.Struct(s).Segment())
	if err != nil {
		return ExecuteRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) CreateJob() (CreateJobRequest, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != createJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CreateJobRequest(p.Struct()), err
}

func (s Message_action) HasCreateJob() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetCreateJob(v CreateJobRequest) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCreateJob sets the createJob field to a newly
// allocated CreateJobRequest struct, preferring placement in s's segment.
func (s Message_action) NewCreateJob() (CreateJobRequest, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewCreateJobRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CreateJobRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) CancelJob() (CancelJobRequest, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != cancelJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CancelJobRequest(p.Struct()), err
}

func (s Message_action) HasCancelJob() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetCancelJob(v CancelJobRequest) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCancelJob sets the cancelJob field to a newly
// allocated CancelJobRequest struct, preferring placement in s's segment.
func (s Message_action) NewCancelJob() (CancelJobRequest, error) {
	capnp.Struct(s).SetUint16(0, 5)
	ss, err := NewCancelJobRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CancelJobRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) DummyRequest() (DummyRequest, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != dummyRequest")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DummyRequest(p.Struct()), err
}

func (s Message_action) HasDummyRequest() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetDummyRequest(v DummyRequest) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDummyRequest sets the dummyRequest field to a newly
// allocated DummyRequest struct, preferring placement in s's segment.
func (s Message_action) NewDummyRequest() (DummyRequest, error) {
	capnp.Struct(s).SetUint16(0, 6)
	ss, err := NewDummyRequest(capnp.Struct(s).Segment())
	if err != nil {
		return DummyRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message) Response() Message_response { return Message_response(s) }

func (s Message_response) Which() Message_response_Which {
	return Message_response_Which(capnp.Struct(s).Uint16(2))
}
func (s Message_response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_response) CreateWorker() (CreateWorkerResponse, error) {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != createWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return CreateWorkerResponse(p.Struct()), err
}

func (s Message_response) HasCreateWorker() bool {
	if capnp.Struct(s).Uint16(2) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetCreateWorker(v CreateWorkerResponse) error {
	capnp.Struct(s).SetUint16(2, 0)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCreateWorker sets the createWorker field to a newly
// allocated CreateWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewCreateWorker() (CreateWorkerResponse, error) {
	capnp.Struct(s).SetUint16(2, 0)
	ss, err := NewCreateWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CreateWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) DestroyWorker() (DestroyWorkerResponse, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != destroyWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return DestroyWorkerResponse(p.Struct()), err
}

func (s Message_response) HasDestroyWorker() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetDestroyWorker(v DestroyWorkerResponse) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDestroyWorker sets the destroyWorker field to a newly
// allocated DestroyWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewDestroyWorker() (DestroyWorkerResponse, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewDestroyWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return DestroyWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) GetWorker() (GetWorkerResponse, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != getWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return GetWorkerResponse(p.Struct()), err
}

func (s Message_response) HasGetWorker() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetGetWorker(v GetWorkerResponse) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewGetWorker sets the getWorker field to a newly
// allocated GetWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewGetWorker() (GetWorkerResponse, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewGetWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return GetWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) Execute() (ExecuteResponse, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != execute")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return ExecuteResponse(p.Struct()), err
}

func (s Message_response) HasExecute() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetExecute(v ExecuteResponse) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewExecute sets the execute field to a newly
// allocated ExecuteResponse struct, preferring placement in s's segment.
func (s Message_response) NewExecute() (ExecuteResponse, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewExecuteResponse(capnp.Struct(s).Segment())
	if err != nil {
		return ExecuteResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) CreateJob() (CreateJobResponse, error) {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != createJob")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return CreateJobResponse(p.Struct()), err
}

func (s Message_response) HasCreateJob() bool {
	if capnp.Struct(s).Uint16(2) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetCreateJob(v CreateJobResponse) error {
	capnp.Struct(s).SetUint16(2, 4)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCreateJob sets the createJob field to a newly
// allocated CreateJobResponse struct, preferring placement in s's segment.
func (s Message_response) NewCreateJob() (CreateJobResponse, error) {
	capnp.Struct(s).SetUint16(2, 4)
	ss, err := NewCreateJobResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CreateJobResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) CancelJob() (CancelJobResponse, error) {
	if capnp.Struct(s).Uint16(2) != 5 {
		panic("Which() != cancelJob")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return CancelJobResponse(p.Struct()), err
}

func (s Message_response) HasCancelJob() bool {
	if capnp.Struct(s).Uint16(2) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetCancelJob(v CancelJobResponse) error {
	capnp.Struct(s).SetUint16(2, 5)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCancelJob sets the cancelJob field to a newly
// allocated CancelJobResponse struct, preferring placement in s's segment.
func (s Message_response) NewCancelJob() (CancelJobResponse, error) {
	capnp.Struct(s).SetUint16(2, 5)
	ss, err := NewCancelJobResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CancelJobResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) UpdateJob() (UpdateJob, error) {
	if capnp.Struct(s).Uint16(2) != 6 {
		panic("Which() != updateJob")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return UpdateJob(p.Struct()), err
}

func (s Message_response) HasUpdateJob() bool {
	if capnp.Struct(s).Uint16(2) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetUpdateJob(v UpdateJob) error {
	capnp.Struct(s).SetUint16(2, 6)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewUpdateJob sets the updateJob field to a newly
// allocated UpdateJob struct, preferring placement in s's segment.
func (s Message_response) NewUpdateJob() (UpdateJob, error) {
	capnp.Struct(s).SetUint16(2, 6)
	ss, err := NewUpdateJob(capnp.Struct(s).Segment())
	if err != nil {
		return UpdateJob{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Action() Message_action_Future { return Message_action_Future{p.Future} }

// Message_action_Future is a wrapper for a Message_action promised by a client call.
type Message_action_Future struct{ *capnp.Future }

func (f Message_action_Future) Struct() (Message_action, error) {
	p, err := f.Future.Ptr()
	return Message_action(p.Struct()), err
}
func (p Message_action_Future) CreateWorker() CreateWorkerRequest_Future {
	return CreateWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) DestroyWorker() DestroyWorkerRequest_Future {
	return DestroyWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) GetWorker() GetWorkerRequest_Future {
	return GetWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) Execute() ExecuteRequest_Future {
	return ExecuteRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) CreateJob() CreateJobRequest_Future {
	return CreateJobRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) CancelJob() CancelJobRequest_Future {
	return CancelJobRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) DummyRequest() DummyRequest_Future {
	return DummyRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_Future) Response() Message_response_Future { return Message_response_Future{p.Future} }

// Message_response_Future is a wrapper for a Message_response promised by a client call.
type Message_response_Future struct{ *capnp.Future }

func (f Message_response_Future) Struct() (Message_response, error) {
	p, err := f.Future.Ptr()
	return Message_response(p.Struct()), err
}
func (p Message_response_Future) CreateWorker() CreateWorkerResponse_Future {
	return CreateWorkerResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) DestroyWorker() DestroyWorkerResponse_Future {
	return DestroyWorkerResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) GetWorker() GetWorkerResponse_Future {
	return GetWorkerResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) Execute() ExecuteResponse_Future {
	return ExecuteResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) CreateJob() CreateJobResponse_Future {
	return CreateJobResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) CancelJob() CancelJobResponse_Future {
	return CancelJobResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) UpdateJob() UpdateJob_Future {
	return UpdateJob_Future{Future: p.Future.Field(1, nil)}
}

const schema_dcccaa5d36aa8b70 = "x\xda\xa4V]l\x14\xd5\x17?\xe7\xde\xd9\xdd\xee\xd2" +
	"e;\xcc>\xc0\xff\xcf\xa6\x86`\x02\x04(P?H" +
	"\x03)b\x89\xb6Q\xd3\xbbH\x00C\x0d\xfbq\x85\xad" +
	"\xdd\x9d\xe9\xcc,\x96DDH\x10\x891\x06#\x09h" +
	"0\"\xc1D0\x81\x1a\xf0\x09\x12b@!\x16\x04\xc4" +
	"\xa8\x09&\x10\x15\"H\x8c\x0f>\x14(c\xee\xec\xec" +
	"\xect:\xa55\xbe\xed\x9e\xf9\xdd\xf3\xf5\xbb\xe7w\xee" +
	"\xbc\xedt\x894?\xde\x1a\x01\xc2\x9e\x0f\x85\xad\x85\xfb" +
	"\xaf\xfe\xff\xf5[\xdf\xbf\x0f\xf2d\xb4\xb4\xb7\x0e>\xd6" +
	"up\xe0\x0a\x840\x02\xd0\xbc\x8d\xa6Q\xd9C#\x00" +
	"\xca.\xda\x0ah}\xb2\xa1\x7f`\xe9\x8a\xd7>\xf4\x81" +
	"\x05\xa2\xf9\x18\xed@\xe5\xac\x0d>M\x0f\x03Z\xb1]" +
	"\xd3\xfe\xfan\xf7\xa0\x0f,\x09\xec&)\x8b\xcaN)" +
	"\x02\xd4\xfal\xf6\x81k\xe1_\xf6}\x04l2\xfaa" +
	"E\xa9\x1b\x95-\xe2\xa7\xb2I\x12\xf1Wm\xd9z\xea" +
	"\xcd\xbf\xb7\x1f\x0ep\xb9W\xd2Q\xe9\xb7]\xf6|\xf1" +
	"\xde\x91O?\xb8t\xc4\x97%\x11\xb0\xb7\xa5\x16T\xf6" +
	"\xda.\xf7H\xaf\x00Z\xf2\xc1\x95S>n\xe2G\x81" +
	"=\x84h\x9d\xdb\xd8\xf4\xf8\xe6\x9b\xda%XA\"v" +
	"\x0b\xa2\xa1\x16\x04l\x96C\xef \xa050e\xff\xf4" +
	"\xf3\xdf\x1e\xfe*\x08\x8c\xd8\xdc\x1f\xee\x10\xe0\x13a\x1b" +
	"\xbc\xf0\xf3\x9b\xc7\x17\x1f:\x7f\xd6\x97\x86\x9dmW]" +
	"\x1a\x95\xde:\x91F\xb1\xee\x06\xa0\xb5\xe3\xcb\xb9/\xde" +
	"\x98\xf0\xf3\xf9\xa0\x9c\xdb\xa3iT\xba\xa2\x02\xbc:*" +
	"rv\x03\x0f\xefY\x05}\"JP9k\xa3O\xdb" +
	"\xe8\xdd3\xd6h\xb7\xefL\xfa\xc1\x8f\xb6\xeb\xbb\x1d\x9d" +
	"\x84\xca\x90\x8d\x1e\xac\xf8\xae?\x19\x7f\xf8\x09~=\x88" +
	"\x8f\xd5\xb1nT\x8a1\x01.\xc4\x04\x1f\x97\xbf\xc9\xbd" +
	"\x91\x90\xb7^\x0f\xe0cGl\x16*{b\x82\x8f\x9d" +
	"\x03\xd7\xfbn\x0dM\xfc=\xc8e9\xb6\x14\x95m\xb6" +
	"\xcb-\xb6\xcb\xd8\x99\x9dk\x1f\xa5\x97\xff\x0c\x02\xef\x8b" +
	"u\xa0r\xcc\x06\xf7\xdb\xe0\xe9\xef~} \xa5\x1e\x1a" +
	"\x0c\xba\xbc\x17\x05\xf87\x1b|-\xd6\x0as,MW" +
	"M\xb5)\x97\x91\xb4\x92\xd6d\xff\x99\x9b\xcbh%\xad" +
	"\xe5\xc9L)\xc7{:\xd4l\x9a\x1b\x9aZ2\x90w" +
	"\"2\x89J\x00\x12\x02\xc8\xf1\x05\x00\xac\x8e\"K\x12" +
	"l\xe4\xba\xae\xeaX\x0f\x04\xeb\x01\x1f\xe0S\xe7\x19\x93" +
	"\xdb>{\xcb\xdc0\x01\x84\xcfz\xd7\xe7\xb2\xa5\x00l" +
	"\x09E\xf6\x0cA\x191\x89\xc2\xd8>\x0b\x80\xb5Qd" +
	"k\x09\xca\x84$\x91\x00\xc8]\xd3\x00\xd8*\x8a\xcc$" +
	"\xb89\xa7\x16\x8b\x99R\xbe\x1a?\x91\xd1\xd7\x198\x11" +
	"\xb0\x93\xa2m\x9b\x08\x18\xe1\xa5\x0d>\xd3Xi\xaeT" +
	"\xf5\x97\xb9.2\x8dp\xc3\xec\xc4q\x1f0\xb4\x84Z" +
	"2\xfc\xed\xfa_\xad]\xb4\x90\xc7(\x10\x8c>(\x89" +
	"6n\x98\xba\xba\xd1u\xda\xa89N\xdd#\xd4\x7fd" +
	"Y\x1f\xcf\x95M\x9en\xadtW$P\xe7&0S" +
	"\xb4q:E\xb6\xc4\xd3\xdb\xc5\x1d\x00l\x11E\xf64" +
	"\x09l\x9b\xf5R\xa1\x87wf\xcc\xf5\x000\x82\xde\x11" +
	"\xf1\x9f\xe5\x86\x91Y\xc7\xe7\xb6frfA-\xb1\xa9" +
	"T\xaa\xb7,;\xfa\xb1n\x00v\x94\";I0\x8e" +
	"\xf7\xadJ\xf8\x13:\x00;N\x91\x9d!\x18'CV" +
	"\x85\xdb\xd3i\x00v\x8a\"\xbb@0N\xefYI\xa4" +
	"\x00\xf29q7\xcePd\x97\x09\xc6\xa5\xbbV\x12%" +
	"\x00\xf9\xa2\xc0^\xa0\xc8\xae\x10\x8c\x87\xeeXI\x0c\x01" +
	"\xc8?\x09\xeb\x8f\x14\xd9\xaf\x04\xe3\xe1A+\x89a\x00" +
	"\xf9\x9a\xc8\xe1*E\xf6\x07A+\xe7P\x06\x09\xd1_" +
	"l\xa8\x093 6\x00Zy\xa7\xff\xd0\xa8:\x08W" +
	"\x04\x1c\xc4:n\xda\xec\x00\xda\xe7\xab#Z\xf9\xba\x99" +
	"W\xc8\xc0\x86\x9a\xf2:\xe7r\xce\x14\x00f\xb1\xa1\xb6" +
	"=\xaa_\x9d\xb9\xab|ug\xb9\x9aU\xb9X\xdc\x98" +
	"\xe6\xbd\x90\x10\x0ccCMl\x1c\xc0\xa8\xf7\xa9J\x8e" +
	"^\x19g\x0e \xf8\x99jY\x98\x14\xca0\x8c\xa1\x14" +
	"\xde\x17\xe6:\x1fE)2$\xccQ\x1fG)zO" +
	"\x98c>\x92R\xd2]a\x9e\xe0c)\x15\xba#\xcc" +
	"\xf5>\x9aR\xe1Aa\x8e\x0b\x9e\xd2\x0f\xe2\xc9]\x8d" +
	"\xa3\xf2\xe4\xee\xc3@\x9e\xdc\x9d2\x82'W\x91\x03y" +
	"r\x17W O\xee\x83\xc1\xf9Z\xd6\xf2\x9e\xb3\xee\xb2" +
	"\x19\x8b$\x8f@zD\xb7\xc1\x1d\xe2\x8c\x10\xdd5\x14" +
	"\xd9z\xcf\x10s\xc1\\\x9e\"\xd3<\x02Y\x14\xbc\xf5" +
	"Pd}\x04eJ+3T\x16\xc75\x8a\xecU\x82" +
	"\x8d\xddj\xb6\xbd\xcd\x1dj\xc3\xcc\x17J\xcb\xcbYH" +
	"t\xf3\x9c\xe95\xabesy\x19\x1a\xb3^\xfbx\x05" +
	"\xff)\xa7\xf5\xfa\xb0z<\xa2\x94\x05`3(\xb2G" +
	"<\xf5\xcc\x17\xfc\xcf\xa3\xc8\x16\x11\xb4\x0c\xaeo(\xe4" +
	"\xf8s\x10\xc9\x14y-\xad\x8a\xb5\x1d0?nY\x02" +
	"74z\x1e8\xf2\xcc\x16 \x88\xe8y\xc6\xc8r\x07" +
	"\x10G\xc3\xac\xda\xb8\xc0\xe8\x11V8lc\xd6W\xde" +
	"\x02Gs\xe7\x89\x10\x95\xea\xe6\xbc\x00\xc0fSd\x0b" +
	"Gp\xc0\xfb\x0a\xe6r3c\x02-\x1b\x18\x02\x82\xa1" +
	"\x7f\xb1 z\x13U\xcd\x1f\xff\xd2\x19QH\x9b#/" +
	"U_\xa3G\xaf\xee\x9aj{|\x81g\xd5\x02'r" +
	"j\x9e\x8f]\x8e\xe7\xaax\xde\x06\xffa\x81z\x1e0" +
	"\xc1\x0e\xbd\x0f\x98aD\xfc\x13\x00\x00\xff\xff\xd8\xacf" +
	"\xae"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_dcccaa5d36aa8b70,
		Nodes: []uint64{
			0x9ad5eb801be0a338,
			0x9e7e5542ccb176a6,
			0x9ef998d3f122950a,
			0xa0a1e306e1a52cac,
			0xaf87f588c4828158,
			0xb0d29ba9b094b66c,
			0xb4652fa21957aa11,
			0xc6afcfce24a319cc,
			0xc9ceab3dbceab238,
			0xcedd0be75e2ec289,
			0xd270ea7f372f79cd,
			0xd712faed705c2898,
			0xe66541250dc00ccd,
			0xe682110f8663cbd4,
			0xe90efdeb78e6cc91,
			0xefd403356091c80a,
			0xf9ab6f1da5c79224,
		},
		Compressed: true,
	})
}
