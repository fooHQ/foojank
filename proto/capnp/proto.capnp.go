// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type CreateWorkerRequest capnp.Struct

// CreateWorkerRequest_TypeID is the unique identifier for the type CreateWorkerRequest.
const CreateWorkerRequest_TypeID = 0x9ef998d3f122950a

func NewCreateWorkerRequest(s *capnp.Segment) (CreateWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CreateWorkerRequest(st), err
}

func NewRootCreateWorkerRequest(s *capnp.Segment) (CreateWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CreateWorkerRequest(st), err
}

func ReadRootCreateWorkerRequest(msg *capnp.Message) (CreateWorkerRequest, error) {
	root, err := msg.Root()
	return CreateWorkerRequest(root.Struct()), err
}

func (s CreateWorkerRequest) String() string {
	str, _ := text.Marshal(0x9ef998d3f122950a, capnp.Struct(s))
	return str
}

func (s CreateWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateWorkerRequest) DecodeFromPtr(p capnp.Ptr) CreateWorkerRequest {
	return CreateWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CreateWorkerRequest_List is a list of CreateWorkerRequest.
type CreateWorkerRequest_List = capnp.StructList[CreateWorkerRequest]

// NewCreateWorkerRequest creates a new list of CreateWorkerRequest.
func NewCreateWorkerRequest_List(s *capnp.Segment, sz int32) (CreateWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CreateWorkerRequest](l), err
}

// CreateWorkerRequest_Future is a wrapper for a CreateWorkerRequest promised by a client call.
type CreateWorkerRequest_Future struct{ *capnp.Future }

func (f CreateWorkerRequest_Future) Struct() (CreateWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return CreateWorkerRequest(p.Struct()), err
}

type CreateWorkerResponse capnp.Struct

// CreateWorkerResponse_TypeID is the unique identifier for the type CreateWorkerResponse.
const CreateWorkerResponse_TypeID = 0xa0a1e306e1a52cac

func NewCreateWorkerResponse(s *capnp.Segment) (CreateWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CreateWorkerResponse(st), err
}

func NewRootCreateWorkerResponse(s *capnp.Segment) (CreateWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CreateWorkerResponse(st), err
}

func ReadRootCreateWorkerResponse(msg *capnp.Message) (CreateWorkerResponse, error) {
	root, err := msg.Root()
	return CreateWorkerResponse(root.Struct()), err
}

func (s CreateWorkerResponse) String() string {
	str, _ := text.Marshal(0xa0a1e306e1a52cac, capnp.Struct(s))
	return str
}

func (s CreateWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateWorkerResponse) DecodeFromPtr(p capnp.Ptr) CreateWorkerResponse {
	return CreateWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateWorkerResponse) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s CreateWorkerResponse) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// CreateWorkerResponse_List is a list of CreateWorkerResponse.
type CreateWorkerResponse_List = capnp.StructList[CreateWorkerResponse]

// NewCreateWorkerResponse creates a new list of CreateWorkerResponse.
func NewCreateWorkerResponse_List(s *capnp.Segment, sz int32) (CreateWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CreateWorkerResponse](l), err
}

// CreateWorkerResponse_Future is a wrapper for a CreateWorkerResponse promised by a client call.
type CreateWorkerResponse_Future struct{ *capnp.Future }

func (f CreateWorkerResponse_Future) Struct() (CreateWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return CreateWorkerResponse(p.Struct()), err
}

type GetWorkerRequest capnp.Struct

// GetWorkerRequest_TypeID is the unique identifier for the type GetWorkerRequest.
const GetWorkerRequest_TypeID = 0xefd403356091c80a

func NewGetWorkerRequest(s *capnp.Segment) (GetWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetWorkerRequest(st), err
}

func NewRootGetWorkerRequest(s *capnp.Segment) (GetWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetWorkerRequest(st), err
}

func ReadRootGetWorkerRequest(msg *capnp.Message) (GetWorkerRequest, error) {
	root, err := msg.Root()
	return GetWorkerRequest(root.Struct()), err
}

func (s GetWorkerRequest) String() string {
	str, _ := text.Marshal(0xefd403356091c80a, capnp.Struct(s))
	return str
}

func (s GetWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetWorkerRequest) DecodeFromPtr(p capnp.Ptr) GetWorkerRequest {
	return GetWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetWorkerRequest) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s GetWorkerRequest) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// GetWorkerRequest_List is a list of GetWorkerRequest.
type GetWorkerRequest_List = capnp.StructList[GetWorkerRequest]

// NewGetWorkerRequest creates a new list of GetWorkerRequest.
func NewGetWorkerRequest_List(s *capnp.Segment, sz int32) (GetWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GetWorkerRequest](l), err
}

// GetWorkerRequest_Future is a wrapper for a GetWorkerRequest promised by a client call.
type GetWorkerRequest_Future struct{ *capnp.Future }

func (f GetWorkerRequest_Future) Struct() (GetWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return GetWorkerRequest(p.Struct()), err
}

type GetWorkerResponse capnp.Struct

// GetWorkerResponse_TypeID is the unique identifier for the type GetWorkerResponse.
const GetWorkerResponse_TypeID = 0xcedd0be75e2ec289

func NewGetWorkerResponse(s *capnp.Segment) (GetWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetWorkerResponse(st), err
}

func NewRootGetWorkerResponse(s *capnp.Segment) (GetWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetWorkerResponse(st), err
}

func ReadRootGetWorkerResponse(msg *capnp.Message) (GetWorkerResponse, error) {
	root, err := msg.Root()
	return GetWorkerResponse(root.Struct()), err
}

func (s GetWorkerResponse) String() string {
	str, _ := text.Marshal(0xcedd0be75e2ec289, capnp.Struct(s))
	return str
}

func (s GetWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetWorkerResponse) DecodeFromPtr(p capnp.Ptr) GetWorkerResponse {
	return GetWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetWorkerResponse) ServiceName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GetWorkerResponse) HasServiceName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GetWorkerResponse) ServiceNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GetWorkerResponse) SetServiceName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GetWorkerResponse) ServiceId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GetWorkerResponse) HasServiceId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GetWorkerResponse) ServiceIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GetWorkerResponse) SetServiceId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GetWorkerResponse_List is a list of GetWorkerResponse.
type GetWorkerResponse_List = capnp.StructList[GetWorkerResponse]

// NewGetWorkerResponse creates a new list of GetWorkerResponse.
func NewGetWorkerResponse_List(s *capnp.Segment, sz int32) (GetWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GetWorkerResponse](l), err
}

// GetWorkerResponse_Future is a wrapper for a GetWorkerResponse promised by a client call.
type GetWorkerResponse_Future struct{ *capnp.Future }

func (f GetWorkerResponse_Future) Struct() (GetWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return GetWorkerResponse(p.Struct()), err
}

type DestroyWorkerRequest capnp.Struct

// DestroyWorkerRequest_TypeID is the unique identifier for the type DestroyWorkerRequest.
const DestroyWorkerRequest_TypeID = 0xe66541250dc00ccd

func NewDestroyWorkerRequest(s *capnp.Segment) (DestroyWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DestroyWorkerRequest(st), err
}

func NewRootDestroyWorkerRequest(s *capnp.Segment) (DestroyWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DestroyWorkerRequest(st), err
}

func ReadRootDestroyWorkerRequest(msg *capnp.Message) (DestroyWorkerRequest, error) {
	root, err := msg.Root()
	return DestroyWorkerRequest(root.Struct()), err
}

func (s DestroyWorkerRequest) String() string {
	str, _ := text.Marshal(0xe66541250dc00ccd, capnp.Struct(s))
	return str
}

func (s DestroyWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DestroyWorkerRequest) DecodeFromPtr(p capnp.Ptr) DestroyWorkerRequest {
	return DestroyWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DestroyWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DestroyWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DestroyWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DestroyWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DestroyWorkerRequest) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s DestroyWorkerRequest) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// DestroyWorkerRequest_List is a list of DestroyWorkerRequest.
type DestroyWorkerRequest_List = capnp.StructList[DestroyWorkerRequest]

// NewDestroyWorkerRequest creates a new list of DestroyWorkerRequest.
func NewDestroyWorkerRequest_List(s *capnp.Segment, sz int32) (DestroyWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DestroyWorkerRequest](l), err
}

// DestroyWorkerRequest_Future is a wrapper for a DestroyWorkerRequest promised by a client call.
type DestroyWorkerRequest_Future struct{ *capnp.Future }

func (f DestroyWorkerRequest_Future) Struct() (DestroyWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return DestroyWorkerRequest(p.Struct()), err
}

type DestroyWorkerResponse capnp.Struct

// DestroyWorkerResponse_TypeID is the unique identifier for the type DestroyWorkerResponse.
const DestroyWorkerResponse_TypeID = 0xaf87f588c4828158

func NewDestroyWorkerResponse(s *capnp.Segment) (DestroyWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DestroyWorkerResponse(st), err
}

func NewRootDestroyWorkerResponse(s *capnp.Segment) (DestroyWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DestroyWorkerResponse(st), err
}

func ReadRootDestroyWorkerResponse(msg *capnp.Message) (DestroyWorkerResponse, error) {
	root, err := msg.Root()
	return DestroyWorkerResponse(root.Struct()), err
}

func (s DestroyWorkerResponse) String() string {
	str, _ := text.Marshal(0xaf87f588c4828158, capnp.Struct(s))
	return str
}

func (s DestroyWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DestroyWorkerResponse) DecodeFromPtr(p capnp.Ptr) DestroyWorkerResponse {
	return DestroyWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DestroyWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DestroyWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DestroyWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DestroyWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// DestroyWorkerResponse_List is a list of DestroyWorkerResponse.
type DestroyWorkerResponse_List = capnp.StructList[DestroyWorkerResponse]

// NewDestroyWorkerResponse creates a new list of DestroyWorkerResponse.
func NewDestroyWorkerResponse_List(s *capnp.Segment, sz int32) (DestroyWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[DestroyWorkerResponse](l), err
}

// DestroyWorkerResponse_Future is a wrapper for a DestroyWorkerResponse promised by a client call.
type DestroyWorkerResponse_Future struct{ *capnp.Future }

func (f DestroyWorkerResponse_Future) Struct() (DestroyWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return DestroyWorkerResponse(p.Struct()), err
}

type ExecuteRequest capnp.Struct

// ExecuteRequest_TypeID is the unique identifier for the type ExecuteRequest.
const ExecuteRequest_TypeID = 0xb0d29ba9b094b66c

func NewExecuteRequest(s *capnp.Segment) (ExecuteRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExecuteRequest(st), err
}

func NewRootExecuteRequest(s *capnp.Segment) (ExecuteRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExecuteRequest(st), err
}

func ReadRootExecuteRequest(msg *capnp.Message) (ExecuteRequest, error) {
	root, err := msg.Root()
	return ExecuteRequest(root.Struct()), err
}

func (s ExecuteRequest) String() string {
	str, _ := text.Marshal(0xb0d29ba9b094b66c, capnp.Struct(s))
	return str
}

func (s ExecuteRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExecuteRequest) DecodeFromPtr(p capnp.Ptr) ExecuteRequest {
	return ExecuteRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExecuteRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExecuteRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExecuteRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExecuteRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExecuteRequest) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ExecuteRequest) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExecuteRequest) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ExecuteRequest_List is a list of ExecuteRequest.
type ExecuteRequest_List = capnp.StructList[ExecuteRequest]

// NewExecuteRequest creates a new list of ExecuteRequest.
func NewExecuteRequest_List(s *capnp.Segment, sz int32) (ExecuteRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ExecuteRequest](l), err
}

// ExecuteRequest_Future is a wrapper for a ExecuteRequest promised by a client call.
type ExecuteRequest_Future struct{ *capnp.Future }

func (f ExecuteRequest_Future) Struct() (ExecuteRequest, error) {
	p, err := f.Future.Ptr()
	return ExecuteRequest(p.Struct()), err
}

type ExecuteResponse capnp.Struct

// ExecuteResponse_TypeID is the unique identifier for the type ExecuteResponse.
const ExecuteResponse_TypeID = 0xe90efdeb78e6cc91

func NewExecuteResponse(s *capnp.Segment) (ExecuteResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExecuteResponse(st), err
}

func NewRootExecuteResponse(s *capnp.Segment) (ExecuteResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExecuteResponse(st), err
}

func ReadRootExecuteResponse(msg *capnp.Message) (ExecuteResponse, error) {
	root, err := msg.Root()
	return ExecuteResponse(root.Struct()), err
}

func (s ExecuteResponse) String() string {
	str, _ := text.Marshal(0xe90efdeb78e6cc91, capnp.Struct(s))
	return str
}

func (s ExecuteResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExecuteResponse) DecodeFromPtr(p capnp.Ptr) ExecuteResponse {
	return ExecuteResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExecuteResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExecuteResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExecuteResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExecuteResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExecuteResponse) Code() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ExecuteResponse) SetCode(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// ExecuteResponse_List is a list of ExecuteResponse.
type ExecuteResponse_List = capnp.StructList[ExecuteResponse]

// NewExecuteResponse creates a new list of ExecuteResponse.
func NewExecuteResponse_List(s *capnp.Segment, sz int32) (ExecuteResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExecuteResponse](l), err
}

// ExecuteResponse_Future is a wrapper for a ExecuteResponse promised by a client call.
type ExecuteResponse_Future struct{ *capnp.Future }

func (f ExecuteResponse_Future) Struct() (ExecuteResponse, error) {
	p, err := f.Future.Ptr()
	return ExecuteResponse(p.Struct()), err
}

type DummyRequest capnp.Struct

// DummyRequest_TypeID is the unique identifier for the type DummyRequest.
const DummyRequest_TypeID = 0xe682110f8663cbd4

func NewDummyRequest(s *capnp.Segment) (DummyRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DummyRequest(st), err
}

func NewRootDummyRequest(s *capnp.Segment) (DummyRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DummyRequest(st), err
}

func ReadRootDummyRequest(msg *capnp.Message) (DummyRequest, error) {
	root, err := msg.Root()
	return DummyRequest(root.Struct()), err
}

func (s DummyRequest) String() string {
	str, _ := text.Marshal(0xe682110f8663cbd4, capnp.Struct(s))
	return str
}

func (s DummyRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DummyRequest) DecodeFromPtr(p capnp.Ptr) DummyRequest {
	return DummyRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DummyRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DummyRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DummyRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DummyRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// DummyRequest_List is a list of DummyRequest.
type DummyRequest_List = capnp.StructList[DummyRequest]

// NewDummyRequest creates a new list of DummyRequest.
func NewDummyRequest_List(s *capnp.Segment, sz int32) (DummyRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[DummyRequest](l), err
}

// DummyRequest_Future is a wrapper for a DummyRequest promised by a client call.
type DummyRequest_Future struct{ *capnp.Future }

func (f DummyRequest_Future) Struct() (DummyRequest, error) {
	p, err := f.Future.Ptr()
	return DummyRequest(p.Struct()), err
}

type Message capnp.Struct
type Message_action Message
type Message_response Message
type Message_action_Which uint16

const (
	Message_action_Which_createWorker  Message_action_Which = 0
	Message_action_Which_destroyWorker Message_action_Which = 1
	Message_action_Which_getWorker     Message_action_Which = 2
	Message_action_Which_execute       Message_action_Which = 3
	Message_action_Which_dummyRequest  Message_action_Which = 4
)

func (w Message_action_Which) String() string {
	const s = "createWorkerdestroyWorkergetWorkerexecutedummyRequest"
	switch w {
	case Message_action_Which_createWorker:
		return s[0:12]
	case Message_action_Which_destroyWorker:
		return s[12:25]
	case Message_action_Which_getWorker:
		return s[25:34]
	case Message_action_Which_execute:
		return s[34:41]
	case Message_action_Which_dummyRequest:
		return s[41:53]

	}
	return "Message_action_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Message_response_Which uint16

const (
	Message_response_Which_createWorker  Message_response_Which = 0
	Message_response_Which_destroyWorker Message_response_Which = 1
	Message_response_Which_getWorker     Message_response_Which = 2
	Message_response_Which_execute       Message_response_Which = 3
)

func (w Message_response_Which) String() string {
	const s = "createWorkerdestroyWorkergetWorkerexecute"
	switch w {
	case Message_response_Which_createWorker:
		return s[0:12]
	case Message_response_Which_destroyWorker:
		return s[12:25]
	case Message_response_Which_getWorker:
		return s[25:34]
	case Message_response_Which_execute:
		return s[34:41]

	}
	return "Message_response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd270ea7f372f79cd

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd270ea7f372f79cd, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Action() Message_action { return Message_action(s) }

func (s Message_action) Which() Message_action_Which {
	return Message_action_Which(capnp.Struct(s).Uint16(0))
}
func (s Message_action) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_action) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_action) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_action) CreateWorker() (CreateWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != createWorker")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CreateWorkerRequest(p.Struct()), err
}

func (s Message_action) HasCreateWorker() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetCreateWorker(v CreateWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCreateWorker sets the createWorker field to a newly
// allocated CreateWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewCreateWorker() (CreateWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewCreateWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CreateWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) DestroyWorker() (DestroyWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != destroyWorker")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DestroyWorkerRequest(p.Struct()), err
}

func (s Message_action) HasDestroyWorker() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetDestroyWorker(v DestroyWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDestroyWorker sets the destroyWorker field to a newly
// allocated DestroyWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewDestroyWorker() (DestroyWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewDestroyWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return DestroyWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) GetWorker() (GetWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != getWorker")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GetWorkerRequest(p.Struct()), err
}

func (s Message_action) HasGetWorker() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetGetWorker(v GetWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGetWorker sets the getWorker field to a newly
// allocated GetWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewGetWorker() (GetWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewGetWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return GetWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) Execute() (ExecuteRequest, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != execute")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ExecuteRequest(p.Struct()), err
}

func (s Message_action) HasExecute() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetExecute(v ExecuteRequest) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewExecute sets the execute field to a newly
// allocated ExecuteRequest struct, preferring placement in s's segment.
func (s Message_action) NewExecute() (ExecuteRequest, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewExecuteRequest(capnp.Struct(s).Segment())
	if err != nil {
		return ExecuteRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) DummyRequest() (DummyRequest, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != dummyRequest")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DummyRequest(p.Struct()), err
}

func (s Message_action) HasDummyRequest() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetDummyRequest(v DummyRequest) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDummyRequest sets the dummyRequest field to a newly
// allocated DummyRequest struct, preferring placement in s's segment.
func (s Message_action) NewDummyRequest() (DummyRequest, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewDummyRequest(capnp.Struct(s).Segment())
	if err != nil {
		return DummyRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message) Response() Message_response { return Message_response(s) }

func (s Message_response) Which() Message_response_Which {
	return Message_response_Which(capnp.Struct(s).Uint16(2))
}
func (s Message_response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_response) CreateWorker() (CreateWorkerResponse, error) {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != createWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return CreateWorkerResponse(p.Struct()), err
}

func (s Message_response) HasCreateWorker() bool {
	if capnp.Struct(s).Uint16(2) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetCreateWorker(v CreateWorkerResponse) error {
	capnp.Struct(s).SetUint16(2, 0)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCreateWorker sets the createWorker field to a newly
// allocated CreateWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewCreateWorker() (CreateWorkerResponse, error) {
	capnp.Struct(s).SetUint16(2, 0)
	ss, err := NewCreateWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CreateWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) DestroyWorker() (DestroyWorkerResponse, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != destroyWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return DestroyWorkerResponse(p.Struct()), err
}

func (s Message_response) HasDestroyWorker() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetDestroyWorker(v DestroyWorkerResponse) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDestroyWorker sets the destroyWorker field to a newly
// allocated DestroyWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewDestroyWorker() (DestroyWorkerResponse, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewDestroyWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return DestroyWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) GetWorker() (GetWorkerResponse, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != getWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return GetWorkerResponse(p.Struct()), err
}

func (s Message_response) HasGetWorker() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetGetWorker(v GetWorkerResponse) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewGetWorker sets the getWorker field to a newly
// allocated GetWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewGetWorker() (GetWorkerResponse, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewGetWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return GetWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) Execute() (ExecuteResponse, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != execute")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return ExecuteResponse(p.Struct()), err
}

func (s Message_response) HasExecute() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetExecute(v ExecuteResponse) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewExecute sets the execute field to a newly
// allocated ExecuteResponse struct, preferring placement in s's segment.
func (s Message_response) NewExecute() (ExecuteResponse, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewExecuteResponse(capnp.Struct(s).Segment())
	if err != nil {
		return ExecuteResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Action() Message_action_Future { return Message_action_Future{p.Future} }

// Message_action_Future is a wrapper for a Message_action promised by a client call.
type Message_action_Future struct{ *capnp.Future }

func (f Message_action_Future) Struct() (Message_action, error) {
	p, err := f.Future.Ptr()
	return Message_action(p.Struct()), err
}
func (p Message_action_Future) CreateWorker() CreateWorkerRequest_Future {
	return CreateWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) DestroyWorker() DestroyWorkerRequest_Future {
	return DestroyWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) GetWorker() GetWorkerRequest_Future {
	return GetWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) Execute() ExecuteRequest_Future {
	return ExecuteRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) DummyRequest() DummyRequest_Future {
	return DummyRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_Future) Response() Message_response_Future { return Message_response_Future{p.Future} }

// Message_response_Future is a wrapper for a Message_response promised by a client call.
type Message_response_Future struct{ *capnp.Future }

func (f Message_response_Future) Struct() (Message_response, error) {
	p, err := f.Future.Ptr()
	return Message_response(p.Struct()), err
}
func (p Message_response_Future) CreateWorker() CreateWorkerResponse_Future {
	return CreateWorkerResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) DestroyWorker() DestroyWorkerResponse_Future {
	return DestroyWorkerResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) GetWorker() GetWorkerResponse_Future {
	return GetWorkerResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) Execute() ExecuteResponse_Future {
	return ExecuteResponse_Future{Future: p.Future.Field(1, nil)}
}

const schema_dcccaa5d36aa8b70 = "x\xda\x94\x94_h\x1cU\x18\xc5\xcf\xb9w&\x9b\xc6" +
	"]w\xc7\xd9\x97\x8a! \x0aV4m\xa9\x7f\xa0\x08" +
	"\xa9\xda\"\x15*\xde\x80\xd4\x17\xa5\xeb\xee%F\x9b\xcc" +
	"\xee\xccD\x1bh\xa9-\xd6V\xb4\xd0\x80\x85\x88Vl" +
	"\xd5\x87\x04\xa5\x15\xac\xe0\x83 \"\"\x9aV\xac\xf5\xc1" +
	"\xa2\x0fUL1>\x88B\x1f\x8aM\xaf\xdc\xd9\xcdl" +
	"\xb2\x9d\x14}[\xbe=s\xbe\xfb\xfd\xeew\xee\x1aW" +
	"lp\xd6\x16\xf6\xbb\x10j\x83\xdbez\x0e\xdf\xfc\xd7" +
	"\xf7\x93\x97\xde\x82\x97\xa7\xa9\xbf2}\xcf\x13\xd33?" +
	"\xc1\xc9\x01\xeb\xa6\x84\xa0\x7fR\xe4 \xcd\xfbw\xbcw" +
	"\xbe\xeb\xd7\xa3oC\xe5\xd9)\x9b\x10=\xf4\x8f\x8a\x1c" +
	"\xe0\x1f\x11\x03\xa0y|\xcf\xde/\x0e\\\xdc\x7f<\xc3" +
	"\xf2Sq\x03\xfdS\x89\xe5\xf6\x8f_;1\xf5\xc6\x99" +
	"\x13KU.\xad\xcf\x948\x974\x86\xffa\xe2\xe8M" +
	"o]yl\xb5\xfe\x08\xaaL\x9aS\xe3\xab\xef\xdd=" +
	"W?\x83\xc7D\x8e.\xe0\x7f'\xce\x81\xeb~\x10}" +
	"\x04\xcd\xcc\xcawn9\xfd\xed\xf1/3\xb4\x0e\xe9_" +
	"\x94s\xa0\x7fI^\x00\xcd\xcb\x9f\xf7?y\xe1\xba\x9f" +
	"Ow\x1c!i\xfc\xa3\xf3\xb7\xff\x9b=\xb3\x7f\xdey" +
	"\x1e\x8b\x8c\x96\x12h\x8a7\xb9\xc7\xfc-\xae\xfd\xb5\xd9" +
	"M\xc4\xf9\xcf\x0a\xb7\xde\xafg\xb3p5\xdc\x1e\xfa{" +
	"\x12\xf1.\xd7\x0ew\xf6\x9b\xeaKEo\xef\xec\xd5\xb8" +
	"\xfc#\xee\xd7\xfe\x94kiM\xcc\xcc\xee\xf8c\xfe\xfa" +
	"\xdf3\x1c\xfd}\xee/\xfeDbx01\xec\xf9j" +
	"b\xdb\xdd\xf2\xec\x9fY\xda\x0f\xdc9\xff\x93D{\xd2" +
	"\x1d\xc0\x9d\xa6\x1e\x06q\xd0_\xad\xc8\xfah}\xfd\x83" +
	"\xa1\xae\xc4zk\x10>\xab\xc3A\xdd\x18\xd3Q\x8cG" +
	"\xad\xc5\xf2\xa2\xa8\x1e\x8cF\x1aV\xa6\x1c\xe9\x00\x0e\x01" +
	"\xafp#\xa0\xba%UYP\x0e\xd7\xb8\x02\x82+\xd0" +
	"a\xb4QGq\x18\x8c/q\xa2^\xdcOX\xd9\xa6" +
	"\x1d\xba:\x16\xeb\xe4<2\x8a;\x1a\xdd\xdenT\xac" +
	"U\xe2\x0a\x0b\x10,\xa0\xc3c\x8b\x8e\xa2\xca\x90\xee\xaf" +
	"T\xe3a\x19\x8c\xaa\xb2t\xf2\xc6$\x0e\xbb\x9e\x01\xd4" +
	"NIu@\xb0\xc0+\xa6L[\xdd\x17\x02\xeaEI" +
	"uH\xb0 \xe6M\x99\x02\xf0\x0e\x0e\x02\xeaUI5" +
	")X\x90\x97M\x99\x12\xf0\x0e?\x00\xa8C\x92\xeaM" +
	"\xc1\x82\xf3\x8f)\xd3\x01\xbc\xd7\xad\xef\xa4\xa4zW\xd0" +
	"T[\xccP\xb4\xb3\xb2\xd4N\x1d\xc8\x12hj-\x16" +
	"\xe8\x0bZ\x8at\x85Z\x8a!\x1d'\xa4\xc0\xe4\xfb\x85" +
	"+n\xfe\xbb[7!\xb1\xd4\x8e\xd5\x82\xf3\xd8\xc8\xc8" +
	"\xf8\xa0n\xa0h\xaf\x93\xa5\xf6\xba\xb5\x04\x99\xa0B\x1d" +
	"\xd5\x8b\xf6fUI:7\x19\xc3\xb2\x0d\x9aW\xb1C" +
	"m\x93T\xdb\x05{y\xc5\x96\xbb\x00o\xd8\xd2zZ" +
	"R\xc5\x82\xbdb\xde\x96s\x80\xd7\xb0\xb8\xea\x92j\xa7" +
	"`\xaf\xbcl\xcb\xdd\x807ny\xc5\x92\xea\x85,2" +
	"\xe9K\xb3,\x99\xf4y\xc9$\x93f\xfa*2i\x84" +
	"\xb2\x06\x7f\xa8eb\x17\xb1/\xd9i\xbbh\xdd\xe9\xa2" +
	"\xadz\x0aP\xb7I\xaa\xbb\x04=\xb2\xb9%k\xed\x80" +
	"k$\xd5}\x82&\xd2\xe1s\xc3U\xfd\x08r\x95\x11" +
	"\xcd<\x04\xf3H\xab\x9b\xc1ZZ[h\xcc\x05\xe2\xb9" +
	"\xcaP\xbb\x1d\x17=w\xde\xaa\xf5\x10$\x17\xbdj\x9e" +
	"\xf70\xc4\x80]\xe4`\xd4\x84i\xfep\xcdl5\xa3" +
	"\xfc?C\x9ap\xd9\xd8Z\x9f\xd4`\x99pF\xf5 " +
	"\xd7\x82\xb6L:\xabAM\xd3\x85\xa0{\x0d\xf6\x8dd" +
	"K\xff\xd39\xff\x0d\x00\x00\xff\xff\xf1R\xfcl"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_dcccaa5d36aa8b70,
		Nodes: []uint64{
			0x9ef998d3f122950a,
			0xa0a1e306e1a52cac,
			0xaf87f588c4828158,
			0xb0d29ba9b094b66c,
			0xb4652fa21957aa11,
			0xc6afcfce24a319cc,
			0xcedd0be75e2ec289,
			0xd270ea7f372f79cd,
			0xe66541250dc00ccd,
			0xe682110f8663cbd4,
			0xe90efdeb78e6cc91,
			0xefd403356091c80a,
		},
		Compressed: true,
	})
}
