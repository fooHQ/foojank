// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type CreateWorkerRequest capnp.Struct

// CreateWorkerRequest_TypeID is the unique identifier for the type CreateWorkerRequest.
const CreateWorkerRequest_TypeID = 0x9ef998d3f122950a

func NewCreateWorkerRequest(s *capnp.Segment) (CreateWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CreateWorkerRequest(st), err
}

func NewRootCreateWorkerRequest(s *capnp.Segment) (CreateWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CreateWorkerRequest(st), err
}

func ReadRootCreateWorkerRequest(msg *capnp.Message) (CreateWorkerRequest, error) {
	root, err := msg.Root()
	return CreateWorkerRequest(root.Struct()), err
}

func (s CreateWorkerRequest) String() string {
	str, _ := text.Marshal(0x9ef998d3f122950a, capnp.Struct(s))
	return str
}

func (s CreateWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateWorkerRequest) DecodeFromPtr(p capnp.Ptr) CreateWorkerRequest {
	return CreateWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CreateWorkerRequest_List is a list of CreateWorkerRequest.
type CreateWorkerRequest_List = capnp.StructList[CreateWorkerRequest]

// NewCreateWorkerRequest creates a new list of CreateWorkerRequest.
func NewCreateWorkerRequest_List(s *capnp.Segment, sz int32) (CreateWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CreateWorkerRequest](l), err
}

// CreateWorkerRequest_Future is a wrapper for a CreateWorkerRequest promised by a client call.
type CreateWorkerRequest_Future struct{ *capnp.Future }

func (f CreateWorkerRequest_Future) Struct() (CreateWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return CreateWorkerRequest(p.Struct()), err
}

type CreateWorkerResponse capnp.Struct

// CreateWorkerResponse_TypeID is the unique identifier for the type CreateWorkerResponse.
const CreateWorkerResponse_TypeID = 0xa0a1e306e1a52cac

func NewCreateWorkerResponse(s *capnp.Segment) (CreateWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CreateWorkerResponse(st), err
}

func NewRootCreateWorkerResponse(s *capnp.Segment) (CreateWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CreateWorkerResponse(st), err
}

func ReadRootCreateWorkerResponse(msg *capnp.Message) (CreateWorkerResponse, error) {
	root, err := msg.Root()
	return CreateWorkerResponse(root.Struct()), err
}

func (s CreateWorkerResponse) String() string {
	str, _ := text.Marshal(0xa0a1e306e1a52cac, capnp.Struct(s))
	return str
}

func (s CreateWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateWorkerResponse) DecodeFromPtr(p capnp.Ptr) CreateWorkerResponse {
	return CreateWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateWorkerResponse) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s CreateWorkerResponse) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// CreateWorkerResponse_List is a list of CreateWorkerResponse.
type CreateWorkerResponse_List = capnp.StructList[CreateWorkerResponse]

// NewCreateWorkerResponse creates a new list of CreateWorkerResponse.
func NewCreateWorkerResponse_List(s *capnp.Segment, sz int32) (CreateWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CreateWorkerResponse](l), err
}

// CreateWorkerResponse_Future is a wrapper for a CreateWorkerResponse promised by a client call.
type CreateWorkerResponse_Future struct{ *capnp.Future }

func (f CreateWorkerResponse_Future) Struct() (CreateWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return CreateWorkerResponse(p.Struct()), err
}

type GetWorkerRequest capnp.Struct

// GetWorkerRequest_TypeID is the unique identifier for the type GetWorkerRequest.
const GetWorkerRequest_TypeID = 0xefd403356091c80a

func NewGetWorkerRequest(s *capnp.Segment) (GetWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetWorkerRequest(st), err
}

func NewRootGetWorkerRequest(s *capnp.Segment) (GetWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetWorkerRequest(st), err
}

func ReadRootGetWorkerRequest(msg *capnp.Message) (GetWorkerRequest, error) {
	root, err := msg.Root()
	return GetWorkerRequest(root.Struct()), err
}

func (s GetWorkerRequest) String() string {
	str, _ := text.Marshal(0xefd403356091c80a, capnp.Struct(s))
	return str
}

func (s GetWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetWorkerRequest) DecodeFromPtr(p capnp.Ptr) GetWorkerRequest {
	return GetWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetWorkerRequest) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s GetWorkerRequest) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// GetWorkerRequest_List is a list of GetWorkerRequest.
type GetWorkerRequest_List = capnp.StructList[GetWorkerRequest]

// NewGetWorkerRequest creates a new list of GetWorkerRequest.
func NewGetWorkerRequest_List(s *capnp.Segment, sz int32) (GetWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GetWorkerRequest](l), err
}

// GetWorkerRequest_Future is a wrapper for a GetWorkerRequest promised by a client call.
type GetWorkerRequest_Future struct{ *capnp.Future }

func (f GetWorkerRequest_Future) Struct() (GetWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return GetWorkerRequest(p.Struct()), err
}

type GetWorkerResponse capnp.Struct

// GetWorkerResponse_TypeID is the unique identifier for the type GetWorkerResponse.
const GetWorkerResponse_TypeID = 0xcedd0be75e2ec289

func NewGetWorkerResponse(s *capnp.Segment) (GetWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetWorkerResponse(st), err
}

func NewRootGetWorkerResponse(s *capnp.Segment) (GetWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetWorkerResponse(st), err
}

func ReadRootGetWorkerResponse(msg *capnp.Message) (GetWorkerResponse, error) {
	root, err := msg.Root()
	return GetWorkerResponse(root.Struct()), err
}

func (s GetWorkerResponse) String() string {
	str, _ := text.Marshal(0xcedd0be75e2ec289, capnp.Struct(s))
	return str
}

func (s GetWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetWorkerResponse) DecodeFromPtr(p capnp.Ptr) GetWorkerResponse {
	return GetWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetWorkerResponse) ServiceName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GetWorkerResponse) HasServiceName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GetWorkerResponse) ServiceNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GetWorkerResponse) SetServiceName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GetWorkerResponse) ServiceId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GetWorkerResponse) HasServiceId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GetWorkerResponse) ServiceIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GetWorkerResponse) SetServiceId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GetWorkerResponse_List is a list of GetWorkerResponse.
type GetWorkerResponse_List = capnp.StructList[GetWorkerResponse]

// NewGetWorkerResponse creates a new list of GetWorkerResponse.
func NewGetWorkerResponse_List(s *capnp.Segment, sz int32) (GetWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GetWorkerResponse](l), err
}

// GetWorkerResponse_Future is a wrapper for a GetWorkerResponse promised by a client call.
type GetWorkerResponse_Future struct{ *capnp.Future }

func (f GetWorkerResponse_Future) Struct() (GetWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return GetWorkerResponse(p.Struct()), err
}

type DestroyWorkerRequest capnp.Struct

// DestroyWorkerRequest_TypeID is the unique identifier for the type DestroyWorkerRequest.
const DestroyWorkerRequest_TypeID = 0xe66541250dc00ccd

func NewDestroyWorkerRequest(s *capnp.Segment) (DestroyWorkerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DestroyWorkerRequest(st), err
}

func NewRootDestroyWorkerRequest(s *capnp.Segment) (DestroyWorkerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DestroyWorkerRequest(st), err
}

func ReadRootDestroyWorkerRequest(msg *capnp.Message) (DestroyWorkerRequest, error) {
	root, err := msg.Root()
	return DestroyWorkerRequest(root.Struct()), err
}

func (s DestroyWorkerRequest) String() string {
	str, _ := text.Marshal(0xe66541250dc00ccd, capnp.Struct(s))
	return str
}

func (s DestroyWorkerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DestroyWorkerRequest) DecodeFromPtr(p capnp.Ptr) DestroyWorkerRequest {
	return DestroyWorkerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DestroyWorkerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DestroyWorkerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DestroyWorkerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DestroyWorkerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DestroyWorkerRequest) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s DestroyWorkerRequest) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// DestroyWorkerRequest_List is a list of DestroyWorkerRequest.
type DestroyWorkerRequest_List = capnp.StructList[DestroyWorkerRequest]

// NewDestroyWorkerRequest creates a new list of DestroyWorkerRequest.
func NewDestroyWorkerRequest_List(s *capnp.Segment, sz int32) (DestroyWorkerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DestroyWorkerRequest](l), err
}

// DestroyWorkerRequest_Future is a wrapper for a DestroyWorkerRequest promised by a client call.
type DestroyWorkerRequest_Future struct{ *capnp.Future }

func (f DestroyWorkerRequest_Future) Struct() (DestroyWorkerRequest, error) {
	p, err := f.Future.Ptr()
	return DestroyWorkerRequest(p.Struct()), err
}

type DestroyWorkerResponse capnp.Struct

// DestroyWorkerResponse_TypeID is the unique identifier for the type DestroyWorkerResponse.
const DestroyWorkerResponse_TypeID = 0xaf87f588c4828158

func NewDestroyWorkerResponse(s *capnp.Segment) (DestroyWorkerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DestroyWorkerResponse(st), err
}

func NewRootDestroyWorkerResponse(s *capnp.Segment) (DestroyWorkerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DestroyWorkerResponse(st), err
}

func ReadRootDestroyWorkerResponse(msg *capnp.Message) (DestroyWorkerResponse, error) {
	root, err := msg.Root()
	return DestroyWorkerResponse(root.Struct()), err
}

func (s DestroyWorkerResponse) String() string {
	str, _ := text.Marshal(0xaf87f588c4828158, capnp.Struct(s))
	return str
}

func (s DestroyWorkerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DestroyWorkerResponse) DecodeFromPtr(p capnp.Ptr) DestroyWorkerResponse {
	return DestroyWorkerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DestroyWorkerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DestroyWorkerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DestroyWorkerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DestroyWorkerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// DestroyWorkerResponse_List is a list of DestroyWorkerResponse.
type DestroyWorkerResponse_List = capnp.StructList[DestroyWorkerResponse]

// NewDestroyWorkerResponse creates a new list of DestroyWorkerResponse.
func NewDestroyWorkerResponse_List(s *capnp.Segment, sz int32) (DestroyWorkerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[DestroyWorkerResponse](l), err
}

// DestroyWorkerResponse_Future is a wrapper for a DestroyWorkerResponse promised by a client call.
type DestroyWorkerResponse_Future struct{ *capnp.Future }

func (f DestroyWorkerResponse_Future) Struct() (DestroyWorkerResponse, error) {
	p, err := f.Future.Ptr()
	return DestroyWorkerResponse(p.Struct()), err
}

type ExecuteRequest capnp.Struct

// ExecuteRequest_TypeID is the unique identifier for the type ExecuteRequest.
const ExecuteRequest_TypeID = 0xb0d29ba9b094b66c

func NewExecuteRequest(s *capnp.Segment) (ExecuteRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExecuteRequest(st), err
}

func NewRootExecuteRequest(s *capnp.Segment) (ExecuteRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExecuteRequest(st), err
}

func ReadRootExecuteRequest(msg *capnp.Message) (ExecuteRequest, error) {
	root, err := msg.Root()
	return ExecuteRequest(root.Struct()), err
}

func (s ExecuteRequest) String() string {
	str, _ := text.Marshal(0xb0d29ba9b094b66c, capnp.Struct(s))
	return str
}

func (s ExecuteRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExecuteRequest) DecodeFromPtr(p capnp.Ptr) ExecuteRequest {
	return ExecuteRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExecuteRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExecuteRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExecuteRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExecuteRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExecuteRequest) Repository() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExecuteRequest) HasRepository() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExecuteRequest) RepositoryBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExecuteRequest) SetRepository(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExecuteRequest) FilePath() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExecuteRequest) HasFilePath() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExecuteRequest) FilePathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExecuteRequest) SetFilePath(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ExecuteRequest_List is a list of ExecuteRequest.
type ExecuteRequest_List = capnp.StructList[ExecuteRequest]

// NewExecuteRequest creates a new list of ExecuteRequest.
func NewExecuteRequest_List(s *capnp.Segment, sz int32) (ExecuteRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ExecuteRequest](l), err
}

// ExecuteRequest_Future is a wrapper for a ExecuteRequest promised by a client call.
type ExecuteRequest_Future struct{ *capnp.Future }

func (f ExecuteRequest_Future) Struct() (ExecuteRequest, error) {
	p, err := f.Future.Ptr()
	return ExecuteRequest(p.Struct()), err
}

type ExecuteResponse capnp.Struct

// ExecuteResponse_TypeID is the unique identifier for the type ExecuteResponse.
const ExecuteResponse_TypeID = 0xe90efdeb78e6cc91

func NewExecuteResponse(s *capnp.Segment) (ExecuteResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExecuteResponse(st), err
}

func NewRootExecuteResponse(s *capnp.Segment) (ExecuteResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExecuteResponse(st), err
}

func ReadRootExecuteResponse(msg *capnp.Message) (ExecuteResponse, error) {
	root, err := msg.Root()
	return ExecuteResponse(root.Struct()), err
}

func (s ExecuteResponse) String() string {
	str, _ := text.Marshal(0xe90efdeb78e6cc91, capnp.Struct(s))
	return str
}

func (s ExecuteResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExecuteResponse) DecodeFromPtr(p capnp.Ptr) ExecuteResponse {
	return ExecuteResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExecuteResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExecuteResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExecuteResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExecuteResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExecuteResponse) Code() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ExecuteResponse) SetCode(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// ExecuteResponse_List is a list of ExecuteResponse.
type ExecuteResponse_List = capnp.StructList[ExecuteResponse]

// NewExecuteResponse creates a new list of ExecuteResponse.
func NewExecuteResponse_List(s *capnp.Segment, sz int32) (ExecuteResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExecuteResponse](l), err
}

// ExecuteResponse_Future is a wrapper for a ExecuteResponse promised by a client call.
type ExecuteResponse_Future struct{ *capnp.Future }

func (f ExecuteResponse_Future) Struct() (ExecuteResponse, error) {
	p, err := f.Future.Ptr()
	return ExecuteResponse(p.Struct()), err
}

type DummyRequest capnp.Struct

// DummyRequest_TypeID is the unique identifier for the type DummyRequest.
const DummyRequest_TypeID = 0xe682110f8663cbd4

func NewDummyRequest(s *capnp.Segment) (DummyRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DummyRequest(st), err
}

func NewRootDummyRequest(s *capnp.Segment) (DummyRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DummyRequest(st), err
}

func ReadRootDummyRequest(msg *capnp.Message) (DummyRequest, error) {
	root, err := msg.Root()
	return DummyRequest(root.Struct()), err
}

func (s DummyRequest) String() string {
	str, _ := text.Marshal(0xe682110f8663cbd4, capnp.Struct(s))
	return str
}

func (s DummyRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DummyRequest) DecodeFromPtr(p capnp.Ptr) DummyRequest {
	return DummyRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DummyRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DummyRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DummyRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DummyRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// DummyRequest_List is a list of DummyRequest.
type DummyRequest_List = capnp.StructList[DummyRequest]

// NewDummyRequest creates a new list of DummyRequest.
func NewDummyRequest_List(s *capnp.Segment, sz int32) (DummyRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[DummyRequest](l), err
}

// DummyRequest_Future is a wrapper for a DummyRequest promised by a client call.
type DummyRequest_Future struct{ *capnp.Future }

func (f DummyRequest_Future) Struct() (DummyRequest, error) {
	p, err := f.Future.Ptr()
	return DummyRequest(p.Struct()), err
}

type Message capnp.Struct
type Message_action Message
type Message_response Message
type Message_action_Which uint16

const (
	Message_action_Which_createWorker  Message_action_Which = 0
	Message_action_Which_destroyWorker Message_action_Which = 1
	Message_action_Which_getWorker     Message_action_Which = 2
	Message_action_Which_execute       Message_action_Which = 3
	Message_action_Which_dummyRequest  Message_action_Which = 4
)

func (w Message_action_Which) String() string {
	const s = "createWorkerdestroyWorkergetWorkerexecutedummyRequest"
	switch w {
	case Message_action_Which_createWorker:
		return s[0:12]
	case Message_action_Which_destroyWorker:
		return s[12:25]
	case Message_action_Which_getWorker:
		return s[25:34]
	case Message_action_Which_execute:
		return s[34:41]
	case Message_action_Which_dummyRequest:
		return s[41:53]

	}
	return "Message_action_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Message_response_Which uint16

const (
	Message_response_Which_createWorker  Message_response_Which = 0
	Message_response_Which_destroyWorker Message_response_Which = 1
	Message_response_Which_getWorker     Message_response_Which = 2
	Message_response_Which_execute       Message_response_Which = 3
)

func (w Message_response_Which) String() string {
	const s = "createWorkerdestroyWorkergetWorkerexecute"
	switch w {
	case Message_response_Which_createWorker:
		return s[0:12]
	case Message_response_Which_destroyWorker:
		return s[12:25]
	case Message_response_Which_getWorker:
		return s[25:34]
	case Message_response_Which_execute:
		return s[34:41]

	}
	return "Message_response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd270ea7f372f79cd

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd270ea7f372f79cd, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Action() Message_action { return Message_action(s) }

func (s Message_action) Which() Message_action_Which {
	return Message_action_Which(capnp.Struct(s).Uint16(0))
}
func (s Message_action) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_action) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_action) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_action) CreateWorker() (CreateWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != createWorker")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CreateWorkerRequest(p.Struct()), err
}

func (s Message_action) HasCreateWorker() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetCreateWorker(v CreateWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCreateWorker sets the createWorker field to a newly
// allocated CreateWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewCreateWorker() (CreateWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewCreateWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return CreateWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) DestroyWorker() (DestroyWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != destroyWorker")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DestroyWorkerRequest(p.Struct()), err
}

func (s Message_action) HasDestroyWorker() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetDestroyWorker(v DestroyWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDestroyWorker sets the destroyWorker field to a newly
// allocated DestroyWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewDestroyWorker() (DestroyWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewDestroyWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return DestroyWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) GetWorker() (GetWorkerRequest, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != getWorker")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GetWorkerRequest(p.Struct()), err
}

func (s Message_action) HasGetWorker() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetGetWorker(v GetWorkerRequest) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGetWorker sets the getWorker field to a newly
// allocated GetWorkerRequest struct, preferring placement in s's segment.
func (s Message_action) NewGetWorker() (GetWorkerRequest, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewGetWorkerRequest(capnp.Struct(s).Segment())
	if err != nil {
		return GetWorkerRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) Execute() (ExecuteRequest, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != execute")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ExecuteRequest(p.Struct()), err
}

func (s Message_action) HasExecute() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetExecute(v ExecuteRequest) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewExecute sets the execute field to a newly
// allocated ExecuteRequest struct, preferring placement in s's segment.
func (s Message_action) NewExecute() (ExecuteRequest, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewExecuteRequest(capnp.Struct(s).Segment())
	if err != nil {
		return ExecuteRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_action) DummyRequest() (DummyRequest, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != dummyRequest")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DummyRequest(p.Struct()), err
}

func (s Message_action) HasDummyRequest() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_action) SetDummyRequest(v DummyRequest) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDummyRequest sets the dummyRequest field to a newly
// allocated DummyRequest struct, preferring placement in s's segment.
func (s Message_action) NewDummyRequest() (DummyRequest, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewDummyRequest(capnp.Struct(s).Segment())
	if err != nil {
		return DummyRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message) Response() Message_response { return Message_response(s) }

func (s Message_response) Which() Message_response_Which {
	return Message_response_Which(capnp.Struct(s).Uint16(2))
}
func (s Message_response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_response) CreateWorker() (CreateWorkerResponse, error) {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != createWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return CreateWorkerResponse(p.Struct()), err
}

func (s Message_response) HasCreateWorker() bool {
	if capnp.Struct(s).Uint16(2) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetCreateWorker(v CreateWorkerResponse) error {
	capnp.Struct(s).SetUint16(2, 0)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCreateWorker sets the createWorker field to a newly
// allocated CreateWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewCreateWorker() (CreateWorkerResponse, error) {
	capnp.Struct(s).SetUint16(2, 0)
	ss, err := NewCreateWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CreateWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) DestroyWorker() (DestroyWorkerResponse, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != destroyWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return DestroyWorkerResponse(p.Struct()), err
}

func (s Message_response) HasDestroyWorker() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetDestroyWorker(v DestroyWorkerResponse) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDestroyWorker sets the destroyWorker field to a newly
// allocated DestroyWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewDestroyWorker() (DestroyWorkerResponse, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewDestroyWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return DestroyWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) GetWorker() (GetWorkerResponse, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != getWorker")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return GetWorkerResponse(p.Struct()), err
}

func (s Message_response) HasGetWorker() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetGetWorker(v GetWorkerResponse) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewGetWorker sets the getWorker field to a newly
// allocated GetWorkerResponse struct, preferring placement in s's segment.
func (s Message_response) NewGetWorker() (GetWorkerResponse, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewGetWorkerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return GetWorkerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_response) Execute() (ExecuteResponse, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != execute")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return ExecuteResponse(p.Struct()), err
}

func (s Message_response) HasExecute() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Message_response) SetExecute(v ExecuteResponse) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewExecute sets the execute field to a newly
// allocated ExecuteResponse struct, preferring placement in s's segment.
func (s Message_response) NewExecute() (ExecuteResponse, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewExecuteResponse(capnp.Struct(s).Segment())
	if err != nil {
		return ExecuteResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Action() Message_action_Future { return Message_action_Future{p.Future} }

// Message_action_Future is a wrapper for a Message_action promised by a client call.
type Message_action_Future struct{ *capnp.Future }

func (f Message_action_Future) Struct() (Message_action, error) {
	p, err := f.Future.Ptr()
	return Message_action(p.Struct()), err
}
func (p Message_action_Future) CreateWorker() CreateWorkerRequest_Future {
	return CreateWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) DestroyWorker() DestroyWorkerRequest_Future {
	return DestroyWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) GetWorker() GetWorkerRequest_Future {
	return GetWorkerRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) Execute() ExecuteRequest_Future {
	return ExecuteRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_action_Future) DummyRequest() DummyRequest_Future {
	return DummyRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_Future) Response() Message_response_Future { return Message_response_Future{p.Future} }

// Message_response_Future is a wrapper for a Message_response promised by a client call.
type Message_response_Future struct{ *capnp.Future }

func (f Message_response_Future) Struct() (Message_response, error) {
	p, err := f.Future.Ptr()
	return Message_response(p.Struct()), err
}
func (p Message_response_Future) CreateWorker() CreateWorkerResponse_Future {
	return CreateWorkerResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) DestroyWorker() DestroyWorkerResponse_Future {
	return DestroyWorkerResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) GetWorker() GetWorkerResponse_Future {
	return GetWorkerResponse_Future{Future: p.Future.Field(1, nil)}
}
func (p Message_response_Future) Execute() ExecuteResponse_Future {
	return ExecuteResponse_Future{Future: p.Future.Field(1, nil)}
}

const schema_dcccaa5d36aa8b70 = "x\xda\x8c\x94]h\x1cU\x14\xc7\xcf\xff\xde\x99\xd9\xa4" +
	"f\xdd\x1df\x1fZ1DE\xc5\x14M\x1a\xd6\x0f\x0c" +
	"\x96\xd4Z\x11\x03\x95\xdc\x05\xa9\x08\x95n7\xd7vc" +
	"\xb23;3\xd1.T\xaaEmE\x85\x16,\xa4(" +
	"\xe2\xe7C\x82\xd2\x0a\"\xf4\xa1 \xa2b1V\xa8}" +
	"\xb4\x0fEHQ\x1f\xa4\x0f}\x10\x9b^\xb9\xb3\xb3\xb3" +
	"i2k\xf7q\xcf\xfe\xef\xff\x9c\xf9\x9d\x8fMw\xb3" +
	"-\xc6H\xf6\x90ILl1-\xb5\xee\xd8\x1d\x97\x7f" +
	"\x9d\xfb\xe7\x03\xb2\xd7Cyo-<\xb8sa\xf17" +
	"22D\xc5y\xb6\x1b\xcei\x96!\xae>\xbf\xf7\xb3" +
	"\x8b\xd6\xef\x1f}Hb=V\xcb\x8e\xb3)8_\xb0" +
	"\x0c\x913\xcf\xc6\x08\xea\x99W\x0f~w\xf8\xca\xa1\x13" +
	")\x96g\x98\x0f\xe7Bd9\xfd\xf5\xbb'\xe7\xdf;" +
	"w\xf2z\x95\xa9}\x8a\xa7\xd8(\x9c3\x91\xe5\xf7\xec" +
	"%\x82\xb2\x17vl\xf8xX~E\xe26@\xfd\xdc" +
	"\x18~\xe8\xc0\x9f\xde9z\x9ae`\x12\x15\x07\xf9(" +
	"\x08\xc5\x11>\x00\x82Z\xdc\xf0\xc9\x9dg\x7f9\xf1C" +
	"\x8a\xd8\x00\x8a\xc2\x18\x07\xc1\xd9i\\\"\xa87\xbf\x1d" +
	"z\xee\xd2M\x17\xce\xa6U\xb1\xd9,\xc1\x11\xa6\xaeb" +
	"\xbb\xa9\xabH\xac\xae\xa7\xd0T\x7fi28\xa7#\xf5" +
	"\xa9\xa6\xba\xef\x9b\xec]\x8f\xca\xa54f\x17\xcd)8" +
	"W\"\xf1eS3;\xffS\xe5\x8d\x9c}p)\x85" +
	"\x99mm\x84s\xbb\xa5\x99\x1d]\\\xda\xf7\xd7\xf2\xcd" +
	"\x7f\xa4Y.\x9b[\xe1d-m\xd9ki\xcbu?" +
	"\x1e\xdd\xf5\x00?\xffw\x9ax\xd0\x1a\x87\xb39\x12?" +
	"l\x8d\xd1}\xca\xf3\xdd\xd0\x1d\xae\x94\x0d\xaf\xe6\x0dG" +
	"?\x86*e\xaf\xe6\x8d>\xe6\xcbr(w\xb8\xfe\x0b" +
	"\xd2/\xc9\xfalF\x06\xe1\x84\xf6\xeb\xeeA\xe0\xe5\xdc" +
	"Z '\x00ap\x83\xc8\x00\x91\x9d\xbd\x85H\xf4p" +
	"\x88\x02\x03\xafN\xa2\x97\x18z\xe9\x7f<\xb7\xc9 \xf4" +
	"\xddFb:\xe0\xc5\xa6\xc9\x13\xbe\xfa\xc9\xe3\xfbde" +
	"6\x94\xa51Y\x9fm\x96,z\x92\x02\x06\x9f%\x12" +
	"\xf7p\x88\xfb\x19l\xa0\x00\x1d\x1c\x19'\x12\x9b8\xc4" +
	"#\x0c\xca\x97\x9e\x1bTC\x97\xb8\xdf@\x1f1\xf4\x11" +
	"\xd4\xf3\xd5i9Q\x0e\xf7\x12Q\x12\xebX\xc0v\x19" +
	"\x04\xe5=rh\xac\\\x09\xabnM\x14\xb8\xd1\xa7T" +
	"\x94\xfe\xe5)\"\xb1\x9fC\x1cf\xc8\xe2\x9aj\xe6\x7f" +
	"\xdd'\x12\xafq\x88#\x0cY\xb6\xac\x0a`D\xf6;" +
	"%\"\xf16\x87\x98c\xc8\xf2\xab\xaa\x00Nd\x1f\xdb" +
	"J$\x8ep\x88\xf7\x19\xb2\xc6\xbf\xaa\x00\x83\xc8>\xae" +
	"}\xe78\xc4\xa7\x0c\xaa\x12\xf7\x81r\x1a\x1a\xf2\xedM" +
	"' OP\x931T\x1apcE2\xb1\xb1b\x8f" +
	"\x0c#\xe4\x84\xe8}k\x9e\x9a\xff\x1e\x90M\xc2\xc8\xb7" +
	"W\xb9\xe5<;3\xd3(\xc9:\xe54z\xe4\xdb\xd3" +
	"\x1d\x0b:6\xba\x05\xcd\x97A\xd4b\"\x91\xe7\xc6\xad" +
	"J\xa1\xa0\x17\xdd.\xeb/\xdc\xc5!\xa6\x19\xfaqM" +
	"\x87-\"\xbb\xaa\xd1\xed\xe5\x10!C?[\xd6\xe1\x0c" +
	"\x91]\xd7\xec<\x0e\xb1\x9f\xa1\x9f_\xd5\xe1\x1e\"\xbb" +
	"\xa1\xe1\x85\x1c\xe2\x954L\xc9\xa9\xeb\x88)\xb9o\xa9" +
	"\x98\x92\x8b\xb2\x06S\xb2\xbd7\xa2\xf0Dl\x18\xed\x8f" +
	"[\x0b W\x8d\xef\xee\xb4\xf1-\xad\x18\xdf@\xfa/" +
	"V+\xf2)\xca\x94gd2\xabq\xf4I\xc2d\xd7" +
	"\xf3KIj\xac8\xc3\xf6\xe0(1\x00+\x8e\xadm" +
	"\x8f\x13\x8b\x87]\xb5\xfbG]ou=\xd7Z\xd4\xee" +
	"/\xc5\x9a\xaa\xb7\xc5\xa3\xd7\xf2\xea\x9c\xbdu Z\x95" +
	"\xaeJ\xbc\xb1\x9d8Wq'%Lb0\xbb\xecZ" +
	"tr\x88\xba\xfa\x96\xff\x02\x00\x00\xff\xffZk9F"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_dcccaa5d36aa8b70,
		Nodes: []uint64{
			0x9ef998d3f122950a,
			0xa0a1e306e1a52cac,
			0xaf87f588c4828158,
			0xb0d29ba9b094b66c,
			0xb4652fa21957aa11,
			0xc6afcfce24a319cc,
			0xcedd0be75e2ec289,
			0xd270ea7f372f79cd,
			0xe66541250dc00ccd,
			0xe682110f8663cbd4,
			0xe90efdeb78e6cc91,
			0xefd403356091c80a,
		},
		Compressed: true,
	})
}
